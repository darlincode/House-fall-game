{"ast":null,"code":"import * as THREE from \"three\";\nimport { remap } from \"../utils\";\nimport { noise } from \"../utils/perlin\";\nexport default (function () {\n  var camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 1, 1000);\n  var lookAt = camera.lookAt; //-- Overriding the lookAt function so I always\n  //-- have a quick reference to the lookAt vector\n\n  camera.lookAt = function (vec) {\n    lookAt.apply(camera, [vec]);\n    camera.target = vec;\n  };\n\n  camera.timelines = {};\n\n  camera.shake = function () {\n    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;\n\n    if (!camera.timelines.shake) {\n      camera.timelines.shake = {\n        duration: duration,\n        startPos: camera.position.clone(),\n        seed: Date.now(),\n        update: function update(self, entities, percent, _ref) {\n          var seed = _ref.seed,\n              startPos = _ref.startPos;\n          self.position.x = startPos.x + remap(noise(seed + percent), 0, 1, -1.25, 1.25);\n          self.position.y = startPos.y + remap(noise(seed + 250 + percent), 0, 1, -1.25, 1.25);\n        }\n      };\n    }\n  };\n\n  camera.resize = function (width, height, dpr) {\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  };\n\n  return camera;\n});","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/components/camera.js"],"names":["THREE","remap","noise","camera","PerspectiveCamera","window","innerWidth","innerHeight","lookAt","vec","apply","target","timelines","shake","duration","startPos","position","clone","seed","Date","now","update","self","entities","percent","x","y","resize","width","height","dpr","aspect","updateProjectionMatrix"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,gBAAe,YAAM;AACpB,MAAMC,MAAM,GAAG,IAAIH,KAAK,CAACI,iBAAV,CACd,EADc,EAEdC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFb,EAGd,CAHc,EAId,IAJc,CAAf;AAOA,MAAMC,MAAM,GAAGL,MAAM,CAACK,MAAtB,CARoB,CAUpB;AACA;;AACAL,EAAAA,MAAM,CAACK,MAAP,GAAgB,UAAAC,GAAG,EAAI;AACtBD,IAAAA,MAAM,CAACE,KAAP,CAAaP,MAAb,EAAqB,CAACM,GAAD,CAArB;AACAN,IAAAA,MAAM,CAACQ,MAAP,GAAgBF,GAAhB;AACA,GAHD;;AAKAN,EAAAA,MAAM,CAACS,SAAP,GAAmB,EAAnB;;AAEAT,EAAAA,MAAM,CAACU,KAAP,GAAe,YAAoB;AAAA,QAAnBC,QAAmB,uEAAR,GAAQ;;AAClC,QAAI,CAACX,MAAM,CAACS,SAAP,CAAiBC,KAAtB,EAA6B;AAC5BV,MAAAA,MAAM,CAACS,SAAP,CAAiBC,KAAjB,GAAyB;AACxBC,QAAAA,QAAQ,EAARA,QADwB;AAExBC,QAAAA,QAAQ,EAAEZ,MAAM,CAACa,QAAP,CAAgBC,KAAhB,EAFc;AAGxBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,EAHkB;AAIxBC,QAAAA,MAJwB,kBAIjBC,IAJiB,EAIXC,QAJW,EAIDC,OAJC,QAI4B;AAAA,cAAlBN,IAAkB,QAAlBA,IAAkB;AAAA,cAAZH,QAAY,QAAZA,QAAY;AACnDO,UAAAA,IAAI,CAACN,QAAL,CAAcS,CAAd,GACCV,QAAQ,CAACU,CAAT,GAAaxB,KAAK,CAACC,KAAK,CAACgB,IAAI,GAAGM,OAAR,CAAN,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAAC,IAA/B,EAAqC,IAArC,CADnB;AAEAF,UAAAA,IAAI,CAACN,QAAL,CAAcU,CAAd,GACCX,QAAQ,CAACW,CAAT,GACAzB,KAAK,CAACC,KAAK,CAACgB,IAAI,GAAG,GAAP,GAAaM,OAAd,CAAN,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAAC,IAArC,EAA2C,IAA3C,CAFN;AAGA;AAVuB,OAAzB;AAYA;AACD,GAfD;;AAiBArB,EAAAA,MAAM,CAACwB,MAAP,GAAgB,UAACC,KAAD,EAAQC,MAAR,EAAgBC,GAAhB,EAAwB;AACvC3B,IAAAA,MAAM,CAAC4B,MAAP,GAAgBH,KAAK,GAAGC,MAAxB;AACA1B,IAAAA,MAAM,CAAC6B,sBAAP;AACA,GAHD;;AAKA,SAAO7B,MAAP;AACA,CA1CD","sourcesContent":["import * as THREE from \"three\";\nimport { remap } from \"../utils\";\nimport { noise } from \"../utils/perlin\";\n\nexport default () => {\n\tconst camera = new THREE.PerspectiveCamera(\n\t\t90,\n\t\twindow.innerWidth / window.innerHeight,\n\t\t1,\n\t\t1000\n\t);\n\n\tconst lookAt = camera.lookAt;\n\n\t//-- Overriding the lookAt function so I always\n\t//-- have a quick reference to the lookAt vector\n\tcamera.lookAt = vec => {\n\t\tlookAt.apply(camera, [vec]);\n\t\tcamera.target = vec;\n\t};\n\n\tcamera.timelines = {};\n\n\tcamera.shake = (duration = 400) => {\n\t\tif (!camera.timelines.shake) {\n\t\t\tcamera.timelines.shake = {\n\t\t\t\tduration,\n\t\t\t\tstartPos: camera.position.clone(),\n\t\t\t\tseed: Date.now(),\n\t\t\t\tupdate(self, entities, percent, { seed, startPos }) {\n\t\t\t\t\tself.position.x =\n\t\t\t\t\t\tstartPos.x + remap(noise(seed + percent), 0, 1, -1.25, 1.25);\n\t\t\t\t\tself.position.y =\n\t\t\t\t\t\tstartPos.y +\n\t\t\t\t\t\tremap(noise(seed + 250 + percent), 0, 1, -1.25, 1.25);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\n\tcamera.resize = (width, height, dpr) => {\n\t\tcamera.aspect = width / height;\n\t\tcamera.updateProjectionMatrix();\n\t};\n\n\treturn camera;\n};\n"]},"metadata":{},"sourceType":"module"}