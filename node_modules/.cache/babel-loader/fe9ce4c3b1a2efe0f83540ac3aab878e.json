{"ast":null,"code":"import { rotateAroundPoint } from \"../utils/three\";\n\nvar Camera = function Camera() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$yawSpeed = _ref.yawSpeed,\n      yawSpeed = _ref$yawSpeed === void 0 ? 0.01 : _ref$yawSpeed,\n      _ref$pitchSpeed = _ref.pitchSpeed,\n      pitchSpeed = _ref$pitchSpeed === void 0 ? 0.01 : _ref$pitchSpeed,\n      _ref$zoomSpeed = _ref.zoomSpeed,\n      zoomSpeed = _ref$zoomSpeed === void 0 ? 0.02 : _ref$zoomSpeed;\n\n  return function (entities, _ref2) {\n    var keyboardController = _ref2.keyboardController;\n    var camera = entities.camera;\n\n    if (camera && keyboardController) {\n      var w = keyboardController.w,\n          a = keyboardController.a,\n          s = keyboardController.s,\n          d = keyboardController.d,\n          space = keyboardController.space,\n          control = keyboardController.control; //-- Yaw and pitch rotation\n\n      if (w || a || s || d) {\n        rotateAroundPoint(camera, camera.target, {\n          y: (a ? 1 : d ? -1 : 0) * yawSpeed,\n          x: (w ? 1 : s ? -1 : 0) * pitchSpeed\n        });\n        camera.lookAt(camera.target);\n      } //-- Zooming (pinching)\n\n\n      if (space || control) {\n        var zoomFactor = (space ? 1 : control ? -1 : 0) * zoomSpeed;\n        camera.zoom += zoomFactor;\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    return entities;\n  };\n};\n\nexport default Camera;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/systems/camera.js"],"names":["rotateAroundPoint","Camera","yawSpeed","pitchSpeed","zoomSpeed","entities","keyboardController","camera","w","a","s","d","space","control","target","y","x","lookAt","zoomFactor","zoom","updateProjectionMatrix"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAIJ;AAAA,iFAAP,EAAO;AAAA,2BAHTC,QAGS;AAAA,MAHTA,QAGS,8BAHE,IAGF;AAAA,6BAFTC,UAES;AAAA,MAFTA,UAES,gCAFI,IAEJ;AAAA,4BADTC,SACS;AAAA,MADTA,SACS,+BADG,IACH;;AACT,SAAO,UAACC,QAAD,SAAsC;AAAA,QAAzBC,kBAAyB,SAAzBA,kBAAyB;AAC3C,QAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;;AAEA,QAAIA,MAAM,IAAID,kBAAd,EAAkC;AAAA,UACxBE,CADwB,GACOF,kBADP,CACxBE,CADwB;AAAA,UACrBC,CADqB,GACOH,kBADP,CACrBG,CADqB;AAAA,UAClBC,CADkB,GACOJ,kBADP,CAClBI,CADkB;AAAA,UACfC,CADe,GACOL,kBADP,CACfK,CADe;AAAA,UACZC,KADY,GACON,kBADP,CACZM,KADY;AAAA,UACLC,OADK,GACOP,kBADP,CACLO,OADK,EAGhC;;AACA,UAAIL,CAAC,IAAIC,CAAL,IAAUC,CAAV,IAAeC,CAAnB,EAAsB;AACpBX,QAAAA,iBAAiB,CAACO,MAAD,EAASA,MAAM,CAACO,MAAhB,EAAwB;AACvCC,UAAAA,CAAC,EAAE,CAACN,CAAC,GAAG,CAAH,GAAOE,CAAC,GAAG,CAAC,CAAJ,GAAQ,CAAlB,IAAuBT,QADa;AAEvCc,UAAAA,CAAC,EAAE,CAACR,CAAC,GAAG,CAAH,GAAOE,CAAC,GAAG,CAAC,CAAJ,GAAQ,CAAlB,IAAuBP;AAFa,SAAxB,CAAjB;AAIAI,QAAAA,MAAM,CAACU,MAAP,CAAcV,MAAM,CAACO,MAArB;AACD,OAV+B,CAYhC;;;AACA,UAAIF,KAAK,IAAIC,OAAb,EAAsB;AACpB,YAAMK,UAAU,GAAG,CAACN,KAAK,GAAG,CAAH,GAAOC,OAAO,GAAG,CAAC,CAAJ,GAAQ,CAA5B,IAAiCT,SAApD;AAEAG,QAAAA,MAAM,CAACY,IAAP,IAAeD,UAAf;AACAX,QAAAA,MAAM,CAACa,sBAAP;AACD;AACF;;AAED,WAAOf,QAAP;AACD,GAzBD;AA0BD,CA/BD;;AAiCA,eAAeJ,MAAf","sourcesContent":["import { rotateAroundPoint } from \"../utils/three\";\n\nconst Camera = ({\n  yawSpeed = 0.01,\n  pitchSpeed = 0.01,\n  zoomSpeed = 0.02\n} = {}) => {\n  return (entities, { keyboardController }) => {\n    const camera = entities.camera;\n\n    if (camera && keyboardController) {\n      const { w, a, s, d, space, control } = keyboardController;\n\n      //-- Yaw and pitch rotation\n      if (w || a || s || d) {\n        rotateAroundPoint(camera, camera.target, {\n          y: (a ? 1 : d ? -1 : 0) * yawSpeed,\n          x: (w ? 1 : s ? -1 : 0) * pitchSpeed\n        });\n        camera.lookAt(camera.target);\n      }\n      \n      //-- Zooming (pinching)\n      if (space || control) {\n        const zoomFactor = (space ? 1 : control ? -1 : 0) * zoomSpeed;\n\n        camera.zoom += zoomFactor;\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    return entities;\n  };\n};\n\nexport default Camera;\n"]},"metadata":{},"sourceType":"module"}