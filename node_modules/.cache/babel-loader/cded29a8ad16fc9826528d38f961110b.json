{"ast":null,"code":"import _slicedToArray from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar getGamepad = function getGamepad() {\n  return navigator.getGamepads()[0] || navigator.getGamepads()[1] || navigator.getGamepads()[2] || navigator.getGamepads()[3];\n};\n\nvar vibrate = function vibrate(gp) {\n  return function (effect) {\n    if (gp && gp.vibrationActuator) gp.vibrationActuator.playEffect(\"dual-rumble\", effect);\n  };\n};\n\nvar createGamepadButtonReader = function createGamepadButtonReader() {\n  var buttonIndices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return function (gp) {\n    if (gp) {\n      return buttonIndices.map(function (idx) {\n        return gp.buttons[idx].pressed;\n      });\n    }\n  };\n};\n\nvar createGamepadButtonValueReader = function createGamepadButtonValueReader() {\n  var buttonIndices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.05;\n  return function (gp) {\n    if (gp) {\n      return buttonIndices.map(function (idx) {\n        var button = gp.buttons[idx];\n        return button.pressed && button.value > threshold ? button.value : 0;\n      });\n    }\n  };\n};\n\nvar createGamepadAxesReader = function createGamepadAxesReader() {\n  var axisIndices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var mapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {\n    return x;\n  };\n  var threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.05;\n  return function (gp) {\n    if (gp) {\n      return axisIndices.map(function (idx) {\n        var val = gp.axes[idx];\n        return Math.abs(val) > threshold ? val : 0;\n      });\n    }\n  };\n};\n\nvar stick = function stick(xIdx, yIdx) {\n  var reader = createGamepadAxesReader([xIdx, yIdx]);\n  return function (gp) {\n    var _ref = reader(gp) || [0, 0],\n        _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    return {\n      x: x,\n      y: y,\n      heading: x + y ? Math.atan2(y, x) : null\n    };\n  };\n};\n\nvar button = function button(idx) {\n  var reader = createGamepadButtonReader([idx]);\n  return function (gp) {\n    var _ref3 = reader(gp) || [false],\n        _ref4 = _slicedToArray(_ref3, 1),\n        val = _ref4[0];\n\n    return val;\n  };\n};\n\nvar buttonValue = function buttonValue(idx) {\n  var reader = createGamepadButtonValueReader([idx]);\n  return function (gp) {\n    var _ref5 = reader(gp) || [0],\n        _ref6 = _slicedToArray(_ref5, 1),\n        val = _ref6[0];\n\n    return val;\n  };\n};\n\nvar leftStick = stick(0, 1);\nvar rightStick = stick(2, 3);\nvar button0 = button(0);\nvar button1 = button(1);\nvar leftTrigger = buttonValue(6);\nvar rightTrigger = buttonValue(7);\nvar previous = {};\n\nvar GamepadController = function GamepadController() {\n  var Wrapped = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {\n    return x;\n  };\n  return function (entities, args) {\n    if (!args.gamepadController) {\n      var gamepad = getGamepad();\n      var current = {\n        leftStick: leftStick(gamepad),\n        rightStick: rightStick(gamepad),\n        button0: button0(gamepad),\n        button1: button1(gamepad),\n        leftTrigger: leftTrigger(gamepad),\n        rightTrigger: rightTrigger(gamepad),\n        vibrate: vibrate(gamepad)\n      };\n      args.gamepadController = Object.assign({}, current, {\n        previous: previous\n      });\n      previous = current;\n    }\n\n    return Wrapped(entities, args);\n  };\n};\n\nexport default GamepadController;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/systems/gamepad-controller.js"],"names":["getGamepad","navigator","getGamepads","vibrate","gp","effect","vibrationActuator","playEffect","createGamepadButtonReader","buttonIndices","map","idx","buttons","pressed","createGamepadButtonValueReader","threshold","button","value","createGamepadAxesReader","axisIndices","mapper","x","val","axes","Math","abs","stick","xIdx","yIdx","reader","y","heading","atan2","buttonValue","leftStick","rightStick","button0","button1","leftTrigger","rightTrigger","previous","GamepadController","Wrapped","entities","args","gamepadController","gamepad","current","Object","assign"],"mappings":";;AAAA,IAAMA,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAMC,SAAS,CAACC,WAAV,GAAwB,CAAxB,KAA8BD,SAAS,CAACC,WAAV,GAAwB,CAAxB,CAA9B,IAA4DD,SAAS,CAACC,WAAV,GAAwB,CAAxB,CAA5D,IAA0FD,SAAS,CAACC,WAAV,GAAwB,CAAxB,CAAhG;AAAA,CAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,EAAE,EAAI;AACpB,SAAO,UAAAC,MAAM,EAAI;AACf,QAAID,EAAE,IAAIA,EAAE,CAACE,iBAAb,EACEF,EAAE,CAACE,iBAAH,CAAqBC,UAArB,CAAgC,aAAhC,EAA+CF,MAA/C;AACH,GAHD;AAID,CALD;;AAOA,IAAMG,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAwB;AAAA,MAAvBC,aAAuB,uEAAP,EAAO;AACxD,SAAO,UAAAL,EAAE,EAAI;AACX,QAAIA,EAAJ,EAAQ;AACN,aAAOK,aAAa,CAACC,GAAd,CAAkB,UAAAC,GAAG;AAAA,eAAIP,EAAE,CAACQ,OAAH,CAAWD,GAAX,EAAgBE,OAApB;AAAA,OAArB,CAAP;AACD;AACF,GAJD;AAKD,CAND;;AAQA,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,GAA0C;AAAA,MAAzCL,aAAyC,uEAAzB,EAAyB;AAAA,MAArBM,SAAqB,uEAAT,IAAS;AAC/E,SAAO,UAAAX,EAAE,EAAI;AACX,QAAIA,EAAJ,EAAQ;AACN,aAAOK,aAAa,CAACC,GAAd,CAAkB,UAAAC,GAAG,EAAI;AAC9B,YAAMK,MAAM,GAAGZ,EAAE,CAACQ,OAAH,CAAWD,GAAX,CAAf;AAEA,eAAOK,MAAM,CAACH,OAAP,IAAkBG,MAAM,CAACC,KAAP,GAAeF,SAAjC,GAA6CC,MAAM,CAACC,KAApD,GAA4D,CAAnE;AACD,OAJM,CAAP;AAKD;AACF,GARD;AASD,CAVD;;AAYA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAyD;AAAA,MAAxDC,WAAwD,uEAA1C,EAA0C;AAAA,MAAtCC,MAAsC,uEAA7B,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAA4B;AAAA,MAArBN,SAAqB,uEAAT,IAAS;AACvF,SAAO,UAAAX,EAAE,EAAI;AACX,QAAIA,EAAJ,EAAQ;AACN,aAAOe,WAAW,CAACT,GAAZ,CAAgB,UAAAC,GAAG,EAAI;AAC5B,YAAMW,GAAG,GAAGlB,EAAE,CAACmB,IAAH,CAAQZ,GAAR,CAAZ;AAEA,eAAOa,IAAI,CAACC,GAAL,CAASH,GAAT,IAAgBP,SAAhB,GAA4BO,GAA5B,GAAkC,CAAzC;AACD,OAJM,CAAP;AAKD;AACF,GARD;AASD,CAVD;;AAYA,IAAMI,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAOC,IAAP,EAAgB;AAC5B,MAAMC,MAAM,GAAGX,uBAAuB,CAAC,CAACS,IAAD,EAAOC,IAAP,CAAD,CAAtC;AAEA,SAAO,UAAAxB,EAAE,EAAI;AAAA,eACIyB,MAAM,CAACzB,EAAD,CAAN,IAAc,CAAC,CAAD,EAAI,CAAJ,CADlB;AAAA;AAAA,QACJiB,CADI;AAAA,QACDS,CADC;;AAGX,WAAO;AAAET,MAAAA,CAAC,EAADA,CAAF;AAAKS,MAAAA,CAAC,EAADA,CAAL;AAAQC,MAAAA,OAAO,EAAGV,CAAC,GAAGS,CAAL,GAAUN,IAAI,CAACQ,KAAL,CAAWF,CAAX,EAAcT,CAAd,CAAV,GAA6B;AAA9C,KAAP;AACD,GAJD;AAKD,CARD;;AAUA,IAAML,MAAM,GAAG,SAATA,MAAS,CAACL,GAAD,EAAS;AACtB,MAAMkB,MAAM,GAAGrB,yBAAyB,CAAC,CAACG,GAAD,CAAD,CAAxC;AAEA,SAAO,UAAAP,EAAE,EAAI;AAAA,gBACGyB,MAAM,CAACzB,EAAD,CAAN,IAAc,CAAC,KAAD,CADjB;AAAA;AAAA,QACJkB,GADI;;AAGX,WAAOA,GAAP;AACD,GAJD;AAKD,CARD;;AAUA,IAAMW,WAAW,GAAG,SAAdA,WAAc,CAACtB,GAAD,EAAS;AAC3B,MAAMkB,MAAM,GAAGf,8BAA8B,CAAC,CAACH,GAAD,CAAD,CAA7C;AAEA,SAAO,UAAAP,EAAE,EAAI;AAAA,gBACGyB,MAAM,CAACzB,EAAD,CAAN,IAAc,CAAC,CAAD,CADjB;AAAA;AAAA,QACJkB,GADI;;AAGX,WAAOA,GAAP;AACD,GAJD;AAKD,CARD;;AAUA,IAAMY,SAAS,GAAGR,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAvB;AACA,IAAMS,UAAU,GAAGT,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAxB;AACA,IAAMU,OAAO,GAAGpB,MAAM,CAAC,CAAD,CAAtB;AACA,IAAMqB,OAAO,GAAGrB,MAAM,CAAC,CAAD,CAAtB;AACA,IAAMsB,WAAW,GAAGL,WAAW,CAAC,CAAD,CAA/B;AACA,IAAMM,YAAY,GAAGN,WAAW,CAAC,CAAD,CAAhC;AAEA,IAAIO,QAAQ,GAAG,EAAf;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MAACC,OAAD,uEAAW,UAAArB,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAAZ;AAAA,SAAsB,UAACsB,QAAD,EAAWC,IAAX,EAAoB;AAElE,QAAI,CAACA,IAAI,CAACC,iBAAV,EAA6B;AACzB,UAAMC,OAAO,GAAG9C,UAAU,EAA1B;AAEA,UAAM+C,OAAO,GAAG;AACdb,QAAAA,SAAS,EAAEA,SAAS,CAACY,OAAD,CADN;AAEdX,QAAAA,UAAU,EAAEA,UAAU,CAACW,OAAD,CAFR;AAGdV,QAAAA,OAAO,EAAEA,OAAO,CAACU,OAAD,CAHF;AAIdT,QAAAA,OAAO,EAAEA,OAAO,CAACS,OAAD,CAJF;AAKdR,QAAAA,WAAW,EAAEA,WAAW,CAACQ,OAAD,CALV;AAMdP,QAAAA,YAAY,EAAEA,YAAY,CAACO,OAAD,CANZ;AAOd3C,QAAAA,OAAO,EAAEA,OAAO,CAAC2C,OAAD;AAPF,OAAhB;AAUAF,MAAAA,IAAI,CAACC,iBAAL,GAAyBG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAAEP,QAAAA,QAAQ,EAARA;AAAF,OAA3B,CAAzB;AAEAA,MAAAA,QAAQ,GAAGO,OAAX;AACH;;AAED,WAAOL,OAAO,CAACC,QAAD,EAAWC,IAAX,CAAd;AACD,GArByB;AAAA,CAA1B;;AAuBA,eAAeH,iBAAf","sourcesContent":["const getGamepad = () => navigator.getGamepads()[0] || navigator.getGamepads()[1] || navigator.getGamepads()[2] || navigator.getGamepads()[3];\n\nconst vibrate = gp => {\n  return effect => {\n    if (gp && gp.vibrationActuator)\n      gp.vibrationActuator.playEffect(\"dual-rumble\", effect);\n  };\n};\n\nconst createGamepadButtonReader = (buttonIndices = []) => {\n  return gp => {\n    if (gp) {\n      return buttonIndices.map(idx => gp.buttons[idx].pressed);\n    }\n  }\n};\n\nconst createGamepadButtonValueReader = (buttonIndices = [], threshold = 0.05) => {\n  return gp => {\n    if (gp) {\n      return buttonIndices.map(idx => {\n        const button = gp.buttons[idx];\n\n        return button.pressed && button.value > threshold ? button.value : 0;\n      });\n    }\n  }\n};\n\nconst createGamepadAxesReader = (axisIndices = [], mapper = x => x, threshold = 0.05) => {\n  return gp => {\n    if (gp) {\n      return axisIndices.map(idx => {\n        const val = gp.axes[idx];\n\n        return Math.abs(val) > threshold ? val : 0;\n      })\n    }\n  }\n};\n\nconst stick = (xIdx, yIdx) => {\n  const reader = createGamepadAxesReader([xIdx, yIdx]);\n\n  return gp => {\n    const [x, y] = reader(gp) || [0, 0];\n\n    return { x, y, heading: (x + y) ? Math.atan2(y, x) : null };\n  }\n};\n\nconst button = (idx) => {\n  const reader = createGamepadButtonReader([idx]);\n\n  return gp => {\n    const [val] = reader(gp) || [false];\n\n    return val;\n  }\n};\n\nconst buttonValue = (idx) => {\n  const reader = createGamepadButtonValueReader([idx]);\n\n  return gp => {\n    const [val] = reader(gp) || [0];\n\n    return val;\n  }\n};\n\nconst leftStick = stick(0, 1);\nconst rightStick = stick(2, 3);\nconst button0 = button(0);\nconst button1 = button(1);\nconst leftTrigger = buttonValue(6);\nconst rightTrigger = buttonValue(7);\n\nlet previous = { };\n\nconst GamepadController = (Wrapped = x => x) => (entities, args) => {\n\n  if (!args.gamepadController) {\n      const gamepad = getGamepad();\n\n      const current = {\n        leftStick: leftStick(gamepad),\n        rightStick: rightStick(gamepad),\n        button0: button0(gamepad),\n        button1: button1(gamepad),\n        leftTrigger: leftTrigger(gamepad),\n        rightTrigger: rightTrigger(gamepad),\n        vibrate: vibrate(gamepad)\n      };\n\n      args.gamepadController = Object.assign({}, current, { previous });\n\n      previous = current;\n  }\n\n  return Wrapped(entities, args);\n};\n\nexport default GamepadController;"]},"metadata":{},"sourceType":"module"}