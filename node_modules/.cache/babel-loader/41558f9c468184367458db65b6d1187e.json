{"ast":null,"code":"import Pass from \"./pass\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar MaskPass = function MaskPass(scene, camera) {\n  Pass.call(this);\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.inverse = false;\n};\n\nMaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: MaskPass,\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    var context = renderer.context;\n    var state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    var writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue); // draw into the stencil buffer\n\n    renderer.render(this.scene, this.camera, readBuffer, this.clear);\n    renderer.render(this.scene, this.camera, writeBuffer, this.clear); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n  }\n});\nexport default MaskPass;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/graphics/passes/mask-pass.js"],"names":["Pass","MaskPass","scene","camera","call","clear","needsSwap","inverse","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","delta","maskActive","context","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP"],"mappings":"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","sourcesContent":["import Pass from \"./pass\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nconst MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\n\n\t\tvar context = renderer.context;\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\n\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\n\t}\n\n} );\n\nexport default MaskPass;"]},"metadata":{},"sourceType":"module"}