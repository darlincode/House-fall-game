{"ast":null,"code":"var readKey = function readKey(input, keys, name) {\n  return input.find(function (x) {\n    return x.name === name && keys.indexOf(x.payload.key) !== -1;\n  });\n};\n\nvar createKeyReader = function createKeyReader(keys) {\n  var down = false;\n  return function (input) {\n    if (readKey(input, keys, \"onKeyDown\")) down = true;\n    if (readKey(input, keys, \"onKeyUp\")) down = false;\n    return down;\n  };\n};\n\nvar w = createKeyReader([\"w\", \"W\", \"ArrowUp\"]);\nvar a = createKeyReader([\"a\", \"A\", \"ArrowLeft\"]);\nvar s = createKeyReader([\"s\", \"S\", \"ArrowDown\"]);\nvar d = createKeyReader([\"d\", \"D\", \"ArrowRight\"]);\nvar space = createKeyReader([\" \"]);\nvar control = createKeyReader([\"Control\"]);\nvar previous = {};\n\nvar KeyboardController = function KeyboardController() {\n  var Wrapped = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {\n    return x;\n  };\n  return function (entities, args) {\n    if (!args.keyboardController) {\n      var input = args.input;\n      var current = {\n        w: w(input),\n        a: a(input),\n        s: s(input),\n        d: d(input),\n        space: space(input),\n        control: control(input)\n      };\n      args.keyboardController = Object.assign({}, current, {\n        previous: previous\n      });\n      previous = current;\n    }\n\n    return Wrapped(entities, args);\n  };\n};\n\nexport default KeyboardController;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/systems/keyboard-controller.js"],"names":["readKey","input","keys","name","find","x","indexOf","payload","key","createKeyReader","down","w","a","s","d","space","control","previous","KeyboardController","Wrapped","entities","args","keyboardController","current","Object","assign"],"mappings":"AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,IAAR,EAAcC,IAAd;AAAA,SAAuBF,KAAK,CAACG,IAAN,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACF,IAAF,KAAWA,IAAX,IAAmBD,IAAI,CAACI,OAAL,CAAaD,CAAC,CAACE,OAAF,CAAUC,GAAvB,MAAgC,CAAC,CAAxD;AAAA,GAAZ,CAAvB;AAAA,CAAhB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAP,IAAI,EAAI;AAC9B,MAAIQ,IAAI,GAAG,KAAX;AAEA,SAAO,UAAAT,KAAK,EAAI;AACd,QAAID,OAAO,CAACC,KAAD,EAAQC,IAAR,EAAc,WAAd,CAAX,EACEQ,IAAI,GAAG,IAAP;AAEF,QAAIV,OAAO,CAACC,KAAD,EAAQC,IAAR,EAAc,SAAd,CAAX,EACEQ,IAAI,GAAG,KAAP;AAEF,WAAOA,IAAP;AACD,GARD;AASD,CAZD;;AAcA,IAAMC,CAAC,GAAGF,eAAe,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,SAAX,CAAD,CAAzB;AACA,IAAMG,CAAC,GAAGH,eAAe,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,WAAX,CAAD,CAAzB;AACA,IAAMI,CAAC,GAAGJ,eAAe,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,WAAX,CAAD,CAAzB;AACA,IAAMK,CAAC,GAAGL,eAAe,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,YAAX,CAAD,CAAzB;AACA,IAAMM,KAAK,GAAGN,eAAe,CAAC,CAAC,GAAD,CAAD,CAA7B;AACA,IAAMO,OAAO,GAAGP,eAAe,CAAC,CAAC,SAAD,CAAD,CAA/B;AAEA,IAAIQ,QAAQ,GAAG,EAAf;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAACC,OAAD,uEAAW,UAAAd,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAAZ;AAAA,SAAsB,UAACe,QAAD,EAAWC,IAAX,EAAoB;AAEnE,QAAI,CAACA,IAAI,CAACC,kBAAV,EAA8B;AAC1B,UAAMrB,KAAK,GAAGoB,IAAI,CAACpB,KAAnB;AAEA,UAAMsB,OAAO,GAAG;AACdZ,QAAAA,CAAC,EAAEA,CAAC,CAACV,KAAD,CADU;AAEdW,QAAAA,CAAC,EAAEA,CAAC,CAACX,KAAD,CAFU;AAGdY,QAAAA,CAAC,EAAEA,CAAC,CAACZ,KAAD,CAHU;AAIda,QAAAA,CAAC,EAAEA,CAAC,CAACb,KAAD,CAJU;AAKdc,QAAAA,KAAK,EAAEA,KAAK,CAACd,KAAD,CALE;AAMde,QAAAA,OAAO,EAAEA,OAAO,CAACf,KAAD;AANF,OAAhB;AASAoB,MAAAA,IAAI,CAACC,kBAAL,GAA0BE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAAEN,QAAAA,QAAQ,EAARA;AAAF,OAA3B,CAA1B;AAEAA,MAAAA,QAAQ,GAAGM,OAAX;AACH;;AAED,WAAOJ,OAAO,CAACC,QAAD,EAAWC,IAAX,CAAd;AACD,GApB0B;AAAA,CAA3B;;AAsBA,eAAeH,kBAAf","sourcesContent":["const readKey = (input, keys, name) => input.find(x => x.name === name && keys.indexOf(x.payload.key) !== -1);\n\nconst createKeyReader = keys => {\n  let down = false;\n\n  return input => {\n    if (readKey(input, keys, \"onKeyDown\"))\n      down = true;\n    \n    if (readKey(input, keys, \"onKeyUp\"))\n      down = false;\n\n    return down;\n  }\n};\n\nconst w = createKeyReader([\"w\", \"W\", \"ArrowUp\"]);\nconst a = createKeyReader([\"a\", \"A\", \"ArrowLeft\"]);\nconst s = createKeyReader([\"s\", \"S\", \"ArrowDown\"]);\nconst d = createKeyReader([\"d\", \"D\", \"ArrowRight\"]);\nconst space = createKeyReader([\" \"]);\nconst control = createKeyReader([\"Control\"]);\n\nlet previous = { };\n\nconst KeyboardController = (Wrapped = x => x) => (entities, args) => {\n\n  if (!args.keyboardController) {\n      const input = args.input;\n\n      const current = {\n        w: w(input),\n        a: a(input),\n        s: s(input),\n        d: d(input),\n        space: space(input),\n        control: control(input)\n      };\n\n      args.keyboardController = Object.assign({}, current, { previous });\n\n      previous = current;\n  }\n\n  return Wrapped(entities, args);\n};\n\nexport default KeyboardController;"]},"metadata":{},"sourceType":"module"}