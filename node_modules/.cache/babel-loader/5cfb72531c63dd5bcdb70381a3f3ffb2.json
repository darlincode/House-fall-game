{"ast":null,"code":"import { OrthographicCamera, PlaneBufferGeometry, Mesh } from \"three\";\n\nvar Pass = function Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen\n\n  this.renderToScreen = false;\n};\n\nObject.assign(Pass.prototype, {\n  setSize: function setSize(width, height) {},\n  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport default Pass;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/graphics/passes/pass.js"],"names":["OrthographicCamera","PlaneBufferGeometry","Mesh","Pass","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","width","height","render","renderer","writeBuffer","readBuffer","delta","maskActive","console","error","FullScreenQuad","camera","geometry","material","_mesh","defineProperty","get","set","value"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,mBAA7B,EAAkDC,IAAlD,QAA8D,OAA9D;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAY;AAExB;AACA,OAAKC,OAAL,GAAe,IAAf,CAHwB,CAKxB;;AACA,OAAKC,SAAL,GAAiB,IAAjB,CANwB,CAQxB;;AACA,OAAKC,KAAL,GAAa,KAAb,CATwB,CAWxB;;AACA,OAAKC,cAAL,GAAsB,KAAtB;AAEA,CAdD;;AAgBAC,MAAM,CAACC,MAAP,CAAeN,IAAI,CAACO,SAApB,EAA+B;AAE9BC,EAAAA,OAAO,EAAE,iBAAWC,KAAX,EAAkBC,MAAlB,EAA2B,CAAE,CAFR;AAI9BC,EAAAA,MAAM,EAAE,gBAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAqDC,UAArD,EAAkE;AAEzEC,IAAAA,OAAO,CAACC,KAAR,CAAe,4DAAf;AAEA;AAR6B,CAA/B,E,CAYA;;AAEAlB,IAAI,CAACmB,cAAL,GAAwB,YAAY;AAEnC,MAAIC,MAAM,GAAG,IAAIvB,kBAAJ,CAAwB,CAAE,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAE,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAAb;AACA,MAAIwB,QAAQ,GAAG,IAAIvB,mBAAJ,CAAyB,CAAzB,EAA4B,CAA5B,CAAf;;AAEA,MAAIqB,cAAc,GAAG,SAAjBA,cAAiB,CAAWG,QAAX,EAAsB;AAE1C,SAAKC,KAAL,GAAa,IAAIxB,IAAJ,CAAUsB,QAAV,EAAoBC,QAApB,CAAb;AAEA,GAJD;;AAMAjB,EAAAA,MAAM,CAACmB,cAAP,CAAuBL,cAAc,CAACZ,SAAtC,EAAiD,UAAjD,EAA6D;AAE5DkB,IAAAA,GAAG,EAAE,eAAY;AAEhB,aAAO,KAAKF,KAAL,CAAWD,QAAlB;AAEA,KAN2D;AAQ5DI,IAAAA,GAAG,EAAE,aAAWC,KAAX,EAAmB;AAEvB,WAAKJ,KAAL,CAAWD,QAAX,GAAsBK,KAAtB;AAEA;AAZ2D,GAA7D;AAgBAtB,EAAAA,MAAM,CAACC,MAAP,CAAea,cAAc,CAACZ,SAA9B,EAAyC;AAExCI,IAAAA,MAAM,EAAE,gBAAWC,QAAX,EAAsB;AAE7BA,MAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKY,KAAtB,EAA6BH,MAA7B;AAEA;AANuC,GAAzC;AAUA,SAAOD,cAAP;AAEA,CAvCqB,EAAtB;;AAyCA,eAAenB,IAAf","sourcesContent":["import { OrthographicCamera, PlaneBufferGeometry, Mesh } from \"three\";\n\nconst Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( width, height ) {},\n\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport default Pass;"]},"metadata":{},"sourceType":"module"}