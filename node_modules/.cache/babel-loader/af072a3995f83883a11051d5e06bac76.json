{"ast":null,"code":"import _regeneratorRuntime from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { add, cloneMesh } from \"../utils/three\";\nimport { clamp } from \"../utils\";\nexport default /*#__PURE__*/(function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var parent, _ref$x, x, _ref$z, z, _ref$y, y, _ref$scale, scale, mesh, _ref$morphTargets, morphTargets, model, poses;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parent = _ref.parent, _ref$x = _ref.x, x = _ref$x === void 0 ? 0 : _ref$x, _ref$z = _ref.z, z = _ref$z === void 0 ? 0 : _ref$z, _ref$y = _ref.y, y = _ref$y === void 0 ? 0 : _ref$y, _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? 1 : _ref$scale, mesh = _ref.mesh, _ref$morphTargets = _ref.morphTargets, morphTargets = _ref$morphTargets === void 0 ? {} : _ref$morphTargets;\n            _context.t0 = cloneMesh;\n            _context.next = 4;\n            return Promise.resolve(mesh);\n\n          case 4:\n            _context.t1 = _context.sent;\n            model = (0, _context.t0)(_context.t1);\n            model.position.x = x;\n            model.position.y = y;\n            model.position.z = z;\n            model.scale.x = scale;\n            model.scale.y = scale;\n            model.scale.z = scale;\n            add(parent, model);\n            poses = {};\n            Object.keys(morphTargets).forEach(function (key) {\n              var index = morphTargets[key];\n\n              poses[key] = function (weight) {\n                if (weight === undefined || weight === null) return model.morphTargetInfluences[index];\n                model.morphTargetInfluences[index] = clamp(weight, 0, 1);\n              };\n            });\n            return _context.abrupt(\"return\", {\n              model: model,\n              poses: poses\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/components/animated-model.js"],"names":["add","cloneMesh","clamp","parent","x","z","y","scale","mesh","morphTargets","Promise","resolve","model","position","poses","Object","keys","forEach","key","index","weight","undefined","morphTargetInfluences"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,gBAA/B;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA;AAAA,uEAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,MAAT,QAASA,MAAT,gBAAiBC,CAAjB,EAAiBA,CAAjB,uBAAqB,CAArB,yBAAwBC,CAAxB,EAAwBA,CAAxB,uBAA4B,CAA5B,yBAA+BC,CAA/B,EAA+BA,CAA/B,uBAAmC,CAAnC,6BAAsCC,KAAtC,EAAsCA,KAAtC,2BAA8C,CAA9C,eAAiDC,IAAjD,QAAiDA,IAAjD,2BAAuDC,YAAvD,EAAuDA,YAAvD,kCAAsE,EAAtE;AAAA,0BAEAR,SAFA;AAAA;AAAA,mBAEgBS,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAFhB;;AAAA;AAAA;AAERI,YAAAA,KAFQ;AAIdA,YAAAA,KAAK,CAACC,QAAN,CAAeT,CAAf,GAAmBA,CAAnB;AACAQ,YAAAA,KAAK,CAACC,QAAN,CAAeP,CAAf,GAAmBA,CAAnB;AACAM,YAAAA,KAAK,CAACC,QAAN,CAAeR,CAAf,GAAmBA,CAAnB;AACAO,YAAAA,KAAK,CAACL,KAAN,CAAYH,CAAZ,GAAgBG,KAAhB;AACAK,YAAAA,KAAK,CAACL,KAAN,CAAYD,CAAZ,GAAgBC,KAAhB;AACAK,YAAAA,KAAK,CAACL,KAAN,CAAYF,CAAZ,GAAgBE,KAAhB;AAEAP,YAAAA,GAAG,CAACG,MAAD,EAASS,KAAT,CAAH;AAEME,YAAAA,KAbQ,GAaA,EAbA;AAedC,YAAAA,MAAM,CAACC,IAAP,CAAYP,YAAZ,EAA0BQ,OAA1B,CAAkC,UAAAC,GAAG,EAAI;AACxC,kBAAMC,KAAK,GAAGV,YAAY,CAACS,GAAD,CAA1B;;AAEAJ,cAAAA,KAAK,CAACI,GAAD,CAAL,GAAa,UAAAE,MAAM,EAAI;AACtB,oBAAIA,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,IAAvC,EACC,OAAOR,KAAK,CAACU,qBAAN,CAA4BH,KAA5B,CAAP;AAEDP,gBAAAA,KAAK,CAACU,qBAAN,CAA4BH,KAA5B,IAAqCjB,KAAK,CAACkB,MAAD,EAAS,CAAT,EAAY,CAAZ,CAA1C;AACA,eALD;AAMA,aATD;AAfc,6CA0BP;AACNR,cAAAA,KAAK,EAALA,KADM;AAENE,cAAAA,KAAK,EAALA;AAFM,aA1BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { add, cloneMesh } from \"../utils/three\";\nimport { clamp } from \"../utils\";\n\nexport default async ({ parent, x = 0, z = 0, y = 0, scale = 1, mesh, morphTargets = {} }) => {\n\n\tconst model = cloneMesh(await Promise.resolve(mesh));\n\t\n\tmodel.position.x = x;\n\tmodel.position.y = y;\n\tmodel.position.z = z;\n\tmodel.scale.x = scale;\n\tmodel.scale.y = scale;\n\tmodel.scale.z = scale;\n\n\tadd(parent, model);\n\n\tconst poses = {};\n\t\n\tObject.keys(morphTargets).forEach(key => {\n\t\tconst index = morphTargets[key];\n\n\t\tposes[key] = weight => {\n\t\t\tif (weight === undefined || weight === null)\n\t\t\t\treturn model.morphTargetInfluences[index];\n\n\t\t\tmodel.morphTargetInfluences[index] = clamp(weight, 0, 1);\n\t\t};\n\t})\n\n\treturn {\n\t\tmodel,\n\t\tposes\n\t};\n};"]},"metadata":{},"sourceType":"module"}