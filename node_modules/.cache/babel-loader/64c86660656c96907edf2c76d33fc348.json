{"ast":null,"code":"import * as THREE from \"three\";\nimport { add } from \"../utils/three\";\nexport default (function (_ref) {\n  var parent = _ref.parent,\n      world = _ref.world,\n      _ref$dynamic = _ref.dynamic,\n      dynamic = _ref$dynamic === void 0 ? true : _ref$dynamic,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      _ref$z = _ref.z,\n      z = _ref$z === void 0 ? 0 : _ref$z,\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 0.5 : _ref$radius,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 1.1 : _ref$height,\n      _ref$segments = _ref.segments,\n      segments = _ref$segments === void 0 ? 32 : _ref$segments,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === void 0 ? 1 : _ref$scale,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 0x0fe61f : _ref$color,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity;\n  var geometry = new THREE.CylinderGeometry(radius, radius, height, segments);\n  var material = new THREE.MeshStandardMaterial({\n    color: color,\n    transparent: opacity < 1,\n    opacity: opacity,\n    flatShading: true\n  });\n  var cylinder = new THREE.Mesh(geometry, material);\n  cylinder.position.x = x;\n  cylinder.position.y = y;\n  cylinder.position.z = z;\n  cylinder.scale.x = scale;\n  cylinder.scale.y = scale;\n  cylinder.scale.z = scale;\n  add(parent, cylinder);\n  return {\n    model: cylinder,\n    bodies: [world.add({\n      type: \"cylinder\",\n      size: [radius * scale, height * scale],\n      pos: [x, y, z],\n      rot: [0, 0, 0],\n      move: dynamic,\n      density: 0.1,\n      friction: 0.9,\n      restitution: 0.2,\n      belongsTo: 1,\n      collidesWith: 0xffffffff\n    })],\n    removable: function removable(frustum, self) {\n      return !frustum.intersectsObject(self.model);\n    }\n  };\n});","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/components/cylinder.js"],"names":["THREE","add","parent","world","dynamic","x","y","z","radius","height","segments","scale","color","opacity","geometry","CylinderGeometry","material","MeshStandardMaterial","transparent","flatShading","cylinder","Mesh","position","model","bodies","type","size","pos","rot","move","density","friction","restitution","belongsTo","collidesWith","removable","frustum","self","intersectsObject"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,gBAAe,gBAaT;AAAA,MAZLC,MAYK,QAZLA,MAYK;AAAA,MAXLC,KAWK,QAXLA,KAWK;AAAA,0BAVLC,OAUK;AAAA,MAVLA,OAUK,6BAVK,IAUL;AAAA,oBATLC,CASK;AAAA,MATLA,CASK,uBATD,CASC;AAAA,oBARLC,CAQK;AAAA,MARLA,CAQK,uBARD,CAQC;AAAA,oBAPLC,CAOK;AAAA,MAPLA,CAOK,uBAPD,CAOC;AAAA,yBANLC,MAMK;AAAA,MANLA,MAMK,4BANI,GAMJ;AAAA,yBALLC,MAKK;AAAA,MALLA,MAKK,4BALI,GAKJ;AAAA,2BAJLC,QAIK;AAAA,MAJLA,QAIK,8BAJM,EAIN;AAAA,wBAHLC,KAGK;AAAA,MAHLA,KAGK,2BAHG,CAGH;AAAA,wBAFLC,KAEK;AAAA,MAFLA,KAEK,2BAFG,QAEH;AAAA,0BADLC,OACK;AAAA,MADLA,OACK,6BADK,CACL;AACL,MAAMC,QAAQ,GAAG,IAAId,KAAK,CAACe,gBAAV,CAA2BP,MAA3B,EAAmCA,MAAnC,EAA2CC,MAA3C,EAAmDC,QAAnD,CAAjB;AACA,MAAMM,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,oBAAV,CAA+B;AAAEL,IAAAA,KAAK,EAALA,KAAF;AAASM,IAAAA,WAAW,EAAEL,OAAO,GAAG,CAAhC;AAAmCA,IAAAA,OAAO,EAAPA,OAAnC;AAA4CM,IAAAA,WAAW,EAAE;AAAzD,GAA/B,CAAjB;AACA,MAAMC,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,IAAV,CAAeP,QAAf,EAAyBE,QAAzB,CAAjB;AAEAI,EAAAA,QAAQ,CAACE,QAAT,CAAkBjB,CAAlB,GAAsBA,CAAtB;AACAe,EAAAA,QAAQ,CAACE,QAAT,CAAkBhB,CAAlB,GAAsBA,CAAtB;AACAc,EAAAA,QAAQ,CAACE,QAAT,CAAkBf,CAAlB,GAAsBA,CAAtB;AACAa,EAAAA,QAAQ,CAACT,KAAT,CAAeN,CAAf,GAAmBM,KAAnB;AACAS,EAAAA,QAAQ,CAACT,KAAT,CAAeL,CAAf,GAAmBK,KAAnB;AACAS,EAAAA,QAAQ,CAACT,KAAT,CAAeJ,CAAf,GAAmBI,KAAnB;AAEAV,EAAAA,GAAG,CAACC,MAAD,EAASkB,QAAT,CAAH;AAEA,SAAO;AACNG,IAAAA,KAAK,EAAEH,QADD;AAENI,IAAAA,MAAM,EAAE,CACPrB,KAAK,CAACF,GAAN,CAAU;AACTwB,MAAAA,IAAI,EAAE,UADG;AAETC,MAAAA,IAAI,EAAE,CAAClB,MAAM,GAAGG,KAAV,EAAiBF,MAAM,GAAGE,KAA1B,CAFG;AAGTgB,MAAAA,GAAG,EAAE,CAACtB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAHI;AAITqB,MAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJI;AAKTC,MAAAA,IAAI,EAAEzB,OALG;AAMT0B,MAAAA,OAAO,EAAE,GANA;AAOTC,MAAAA,QAAQ,EAAE,GAPD;AAQTC,MAAAA,WAAW,EAAE,GARJ;AASTC,MAAAA,SAAS,EAAE,CATF;AAUTC,MAAAA,YAAY,EAAE;AAVL,KAAV,CADO,CAFF;AAgBNC,IAAAA,SAAS,EAAE,mBAACC,OAAD,EAAUC,IAAV;AAAA,aAAmB,CAACD,OAAO,CAACE,gBAAR,CAAyBD,IAAI,CAACd,KAA9B,CAApB;AAAA;AAhBL,GAAP;AAkBA,CA7CD","sourcesContent":["import * as THREE from \"three\";\nimport { add } from \"../utils/three\";\n\nexport default ({\n\tparent,\n\tworld,\n\tdynamic = true,\n\tx = 0,\n\ty = 0,\n\tz = 0,\n\tradius = 0.5,\n\theight = 1.1,\n\tsegments = 32,\n\tscale = 1,\n\tcolor = 0x0fe61f,\n\topacity = 1,\n}) => {\n\tconst geometry = new THREE.CylinderGeometry(radius, radius, height, segments);\n\tconst material = new THREE.MeshStandardMaterial({ color, transparent: opacity < 1, opacity, flatShading: true });\n\tconst cylinder = new THREE.Mesh(geometry, material);\n\n\tcylinder.position.x = x;\n\tcylinder.position.y = y;\n\tcylinder.position.z = z;\n\tcylinder.scale.x = scale;\n\tcylinder.scale.y = scale;\n\tcylinder.scale.z = scale;\n\n\tadd(parent, cylinder);\n\n\treturn {\n\t\tmodel: cylinder,\n\t\tbodies: [\n\t\t\tworld.add({\n\t\t\t\ttype: \"cylinder\",\n\t\t\t\tsize: [radius * scale, height * scale],\n\t\t\t\tpos: [x, y, z],\n\t\t\t\trot: [0, 0, 0],\n\t\t\t\tmove: dynamic,\n\t\t\t\tdensity: 0.1,\n\t\t\t\tfriction: 0.9,\n\t\t\t\trestitution: 0.2,\n\t\t\t\tbelongsTo: 1,\n\t\t\t\tcollidesWith: 0xffffffff\n\t\t\t})\n\t\t],\n\t\tremovable: (frustum, self) => !frustum.intersectsObject(self.model)\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}