{"ast":null,"code":"import _regeneratorRuntime from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as THREE from \"three\";\nimport { cloneTexture, add } from \"../utils/three\";\nimport { remap, clamp } from \"../utils\";\nexport default /*#__PURE__*/(function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var parent, _ref$x, x, _ref$z, z, _ref$y, y, spriteSheet, rows, columns, _ref$actions, mappings, texture, spriteMaterial, sprite, actions, timelines;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parent = _ref.parent, _ref$x = _ref.x, x = _ref$x === void 0 ? 0 : _ref$x, _ref$z = _ref.z, z = _ref$z === void 0 ? 0 : _ref$z, _ref$y = _ref.y, y = _ref$y === void 0 ? 0 : _ref$y, spriteSheet = _ref.spriteSheet, rows = _ref.rows, columns = _ref.columns, _ref$actions = _ref.actions, mappings = _ref$actions === void 0 ? {} : _ref$actions;\n            _context.t0 = cloneTexture;\n            _context.next = 4;\n            return Promise.resolve(spriteSheet);\n\n          case 4:\n            _context.t1 = _context.sent;\n            texture = (0, _context.t0)(_context.t1);\n            texture.needsUpdate = true;\n            texture.repeat.set(1 / columns, 1 / rows);\n            spriteMaterial = new THREE.SpriteMaterial({\n              map: texture,\n              color: 0xffffff\n            });\n            sprite = new THREE.Sprite(spriteMaterial);\n            sprite.position.x = x;\n            sprite.position.y = y;\n            sprite.position.z = z;\n            add(parent, sprite);\n            actions = {};\n            timelines = {};\n            Object.keys(mappings).forEach(function (key) {\n              actions[key] = function () {\n                if (timelines.action && timelines.action.key === key) return;\n                var _mappings$key = mappings[key],\n                    start = _mappings$key.start,\n                    end = _mappings$key.end,\n                    _mappings$key$loop = _mappings$key.loop,\n                    loop = _mappings$key$loop === void 0 ? true : _mappings$key$loop,\n                    _mappings$key$speed = _mappings$key.speed,\n                    speed = _mappings$key$speed === void 0 ? 0.25 : _mappings$key$speed,\n                    _update = _mappings$key.update,\n                    _mappings$key$scaleX = _mappings$key.scaleX,\n                    scaleX = _mappings$key$scaleX === void 0 ? 1 : _mappings$key$scaleX,\n                    _mappings$key$scaleY = _mappings$key.scaleY,\n                    scaleY = _mappings$key$scaleY === void 0 ? 1 : _mappings$key$scaleY,\n                    _mappings$key$flipX = _mappings$key.flipX,\n                    flipX = _mappings$key$flipX === void 0 ? false : _mappings$key$flipX,\n                    _mappings$key$flipY = _mappings$key.flipY,\n                    flipY = _mappings$key$flipY === void 0 ? false : _mappings$key$flipY;\n                end = end || start;\n                sprite.scale.x = scaleX;\n                sprite.scale.y = scaleY;\n                texture.repeat.x = Math.abs(texture.repeat.x) * (flipX ? -1 : 1);\n                texture.repeat.y = Math.abs(texture.repeat.y) * (flipY ? -1 : 1);\n                var startColumn = start.column;\n                var startRow = start.row;\n                var endColumn = end.column;\n                var endRow = end.row;\n\n                if (flipX) {\n                  startColumn++;\n                  endColumn++;\n                }\n\n                if (flipY) {\n                  startRow++;\n                  endRow++;\n                }\n\n                var increment = speed * 1 / Math.max(Math.abs(endColumn - startColumn), Math.abs(endRow - startRow), 1);\n\n                if (loop) {\n                  endColumn++;\n                  endRow++;\n                }\n\n                timelines.action = {\n                  while: true,\n                  counter: 0,\n                  key: key,\n                  update: function update(entity, entities, timeline, args) {\n                    var percentage = loop ? timeline.counter % 1 : clamp(timeline.counter, 0, 1);\n                    var column = Math.trunc(remap(percentage, 0, 1, startColumn, endColumn));\n                    var row = Math.trunc(remap(percentage, 0, 1, startRow, endRow));\n                    texture.offset.x = column / columns;\n                    texture.offset.y = row / rows;\n                    timeline.counter += increment;\n                    if (_update) _update(entity, entities, {\n                      column: column,\n                      row: row\n                    }, args);\n                  }\n                };\n              };\n            });\n            return _context.abrupt(\"return\", {\n              model: sprite,\n              actions: actions,\n              timelines: timelines\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/components/sprite.js"],"names":["THREE","cloneTexture","add","remap","clamp","parent","x","z","y","spriteSheet","rows","columns","actions","mappings","Promise","resolve","texture","needsUpdate","repeat","set","spriteMaterial","SpriteMaterial","map","color","sprite","Sprite","position","timelines","Object","keys","forEach","key","action","start","end","loop","speed","update","scaleX","scaleY","flipX","flipY","scale","Math","abs","startColumn","column","startRow","row","endColumn","endRow","increment","max","while","counter","entity","entities","timeline","args","percentage","trunc","offset","model"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { cloneTexture, add } from \"../utils/three\";\nimport { remap, clamp } from \"../utils\";\n\nexport default async ({ parent, x = 0, z = 0, y = 0, spriteSheet, rows, columns, actions: mappings = {} }) => {\n\n\tconst texture = cloneTexture(await Promise.resolve(spriteSheet));\n\n\ttexture.needsUpdate = true;\n\ttexture.repeat.set(1 / columns, 1 / rows);\n\n\tconst spriteMaterial = new THREE.SpriteMaterial({ map: texture, color: 0xffffff });\n\tconst sprite = new THREE.Sprite(spriteMaterial);\n\t\n\tsprite.position.x = x;\n\tsprite.position.y = y;\n\tsprite.position.z = z;\n\n\tadd(parent, sprite);\n\n\tconst actions = {};\n\tconst timelines = {};\n\n\tObject.keys(mappings).forEach(key => {\n\t\tactions[key] = () => {\n\n\t\t\tif (timelines.action && timelines.action.key === key)\n\t\t\t\treturn;\n\n\t\t\tlet { start, end, loop = true, speed = 0.25, update, scaleX = 1, scaleY = 1, flipX = false, flipY = false } = mappings[key];\n\t\t\tend = end || start;\n\n\t\t\tsprite.scale.x = scaleX;\n\t\t\tsprite.scale.y = scaleY;\n\n\t\t\ttexture.repeat.x = Math.abs(texture.repeat.x) * (flipX ? -1 : 1);\n\t\t\ttexture.repeat.y = Math.abs(texture.repeat.y) * (flipY ? -1 : 1);\n\n\t\t\tlet startColumn = start.column;\n\t\t\tlet startRow = start.row;\n\t\t\tlet endColumn = end.column;\n\t\t\tlet endRow = end.row;\n\n\t\t\tif (flipX) {\n\t\t\t\tstartColumn++;\n\t\t\t\tendColumn++;\n\t\t\t}\n\n\t\t\tif (flipY) {\n\t\t\t\tstartRow++;\n\t\t\t\tendRow++;\n\t\t\t}\n\n\t\t\tconst increment = speed * 1 / Math.max(Math.abs(endColumn - startColumn), Math.abs(endRow - startRow), 1)\n\n\t\t\tif (loop) {\n\t\t\t\tendColumn++;\n\t\t\t\tendRow++;\n\t\t\t}\n\n\t\t\ttimelines.action = {\n\t\t\t\twhile: true,\n\t\t\t\tcounter: 0,\n\t\t\t\tkey,\n\t\t\t\tupdate(entity, entities, timeline, args) {\n\t\t\t\t\tconst percentage = loop ? timeline.counter % 1 : clamp(timeline.counter, 0, 1)\n\t\t\t\t\tconst column = Math.trunc(remap(percentage, 0, 1, startColumn, endColumn))\n\t\t\t\t\tconst row = Math.trunc(remap(percentage, 0, 1, startRow, endRow))\n\n\t\t\t\t\ttexture.offset.x = column / columns;\n\t\t\t\t\ttexture.offset.y = row / rows;\n\t\t\t\t\ttimeline.counter += increment;\n\n\t\t\t\t\tif (update)\n\t\t\t\t\t\tupdate(entity, entities, { column, row }, args)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn {\n\t\tmodel: sprite,\n\t\tactions,\n\t\ttimelines\n\t};\n};"]},"metadata":{},"sourceType":"module"}