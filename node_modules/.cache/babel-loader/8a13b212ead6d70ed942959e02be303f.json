{"ast":null,"code":"import _regeneratorRuntime from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/darlington-chuks/Documents/game-engine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as THREE from \"three\";\nimport AnimatedModel from \"./animated-model\";\nimport { firstMesh, promisifyLoader } from \"../utils/three\";\nimport GLTFLoader from \"../utils/three/gltf-loader\";\nimport { between } from \"../utils\";\nimport JetFile from \"../../assets/models/jet.glb\";\nvar loader = promisifyLoader(new GLTFLoader());\nvar mesh = loader.load(JetFile).then(function (gltf) {\n  return firstMesh(gltf.scene);\n});\nexport default /*#__PURE__*/(function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var parent, _ref$x, x, _ref$y, y, _ref$z, z, animated, timelines;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parent = _ref.parent, _ref$x = _ref.x, x = _ref$x === void 0 ? 0 : _ref$x, _ref$y = _ref.y, y = _ref$y === void 0 ? 0 : _ref$y, _ref$z = _ref.z, z = _ref$z === void 0 ? 0 : _ref$z;\n            _context.next = 3;\n            return AnimatedModel({\n              parent: parent,\n              x: x,\n              y: y,\n              z: z,\n              mesh: mesh,\n              morphTargets: {\n                rudderLeft: 0,\n                rudderRight: 1,\n                leftFlapUp: 2,\n                leftFlapDown: 3,\n                rightFlapUp: 4,\n                rightFlapDown: 5\n              }\n            });\n\n          case 3:\n            animated = _context.sent;\n            timelines = {};\n            timelines.controls = {\n              while: true,\n              directions: [{\n                heading: 0,\n                pose: \"rudderRight\"\n              }, {\n                heading: -60,\n                pose: \"leftFlapDown\"\n              }, {\n                heading: -120,\n                pose: \"leftFlapUp\"\n              }, {\n                heading: -180,\n                pose: \"rudderLeft\"\n              }, {\n                heading: 60,\n                pose: \"rightFlapUp\"\n              }, {\n                heading: 120,\n                pose: \"rightFlapDown\"\n              }, {\n                heading: 180,\n                pose: \"rudderLeft\"\n              }],\n              update: function update(self, entities, _ref3, _ref4) {\n                var directions = _ref3.directions;\n                var gamepadController = _ref4.gamepadController;\n                var target = null;\n\n                if (gamepadController.leftStick.heading !== null) {\n                  var degrees = THREE.Math.radToDeg(gamepadController.leftStick.heading);\n                  var direction = directions.find(function (x) {\n                    return between(degrees, x.heading - 30, x.heading + 30);\n                  });\n                  if (direction) target = direction.pose;\n                }\n\n                directions.forEach(function (x) {\n                  var pose = self.poses[x.pose];\n                  var val = pose();\n                  pose(val + (x.pose === target ? 0.01 : -0.01));\n                });\n              }\n            };\n            return _context.abrupt(\"return\", _objectSpread({}, animated, {\n              timelines: timelines\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/components/jet.js"],"names":["THREE","AnimatedModel","firstMesh","promisifyLoader","GLTFLoader","between","JetFile","loader","mesh","load","then","gltf","scene","parent","x","y","z","morphTargets","rudderLeft","rudderRight","leftFlapUp","leftFlapDown","rightFlapUp","rightFlapDown","animated","timelines","controls","while","directions","heading","pose","update","self","entities","gamepadController","target","leftStick","degrees","Math","radToDeg","direction","find","forEach","poses","val"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport AnimatedModel from \"./animated-model\";\nimport { firstMesh, promisifyLoader } from \"../utils/three\";\nimport GLTFLoader from \"../utils/three/gltf-loader\";\nimport { between } from \"../utils\";\nimport JetFile from \"../../assets/models/jet.glb\";\n\nconst loader = promisifyLoader(new GLTFLoader());\nconst mesh = loader.load(JetFile).then(gltf => firstMesh(gltf.scene));\n\nexport default async ({ parent, x = 0, y = 0, z = 0}) => {\n\n\tconst animated = await AnimatedModel({\n\t\tparent,\n\t\tx,\n\t\ty,\n\t\tz,\n\t\tmesh,\n\t\tmorphTargets: {\n\t\t\trudderLeft: 0,\n\t\t\trudderRight: 1,\n\t\t\tleftFlapUp: 2,\n\t\t\tleftFlapDown: 3,\n\t\t\trightFlapUp: 4,\n\t\t\trightFlapDown: 5\n\t\t}\n\t});\n\n\tconst timelines = {};\n\n\ttimelines.controls = {\n\t\twhile: true,\n\t\tdirections: [\n\t\t\t{ heading: 0, pose: \"rudderRight\" },\n\t\t\t{ heading: -60, pose: \"leftFlapDown\" },\n\t\t\t{ heading: -120, pose: \"leftFlapUp\" },\n\t\t\t{ heading: -180, pose: \"rudderLeft\" },\n\t\t\t{ heading: 60, pose: \"rightFlapUp\" },\n\t\t\t{ heading: 120, pose: \"rightFlapDown\" },\n\t\t\t{ heading: 180, pose: \"rudderLeft\" }\n\t\t],\n\t\tupdate(self, entities, { directions }, { gamepadController }) {\n\t\t\tlet target = null;\n\n\t\t\tif (gamepadController.leftStick.heading !== null ) {\n\t\t\t\tconst degrees = THREE.Math.radToDeg(gamepadController.leftStick.heading)\n\t\t\t\tconst direction = directions.find(x => between(degrees, x.heading - 30, x.heading + 30))\n\n\t\t\t\tif (direction)\n\t\t\t\t\ttarget = direction.pose;\n\t\t\t}\n\n\t\t\tdirections.forEach(x => {\n\t\t\t\tconst pose = self.poses[x.pose];\n\t\t\t\tconst val = pose();\n\n\t\t\t\tpose(val + (x.pose === target ? 0.01 : -0.01))\n\t\t\t});\n\t\t}\n\t};\n\n\treturn { ...animated, ...{ timelines }};\n};\n"]},"metadata":{},"sourceType":"module"}