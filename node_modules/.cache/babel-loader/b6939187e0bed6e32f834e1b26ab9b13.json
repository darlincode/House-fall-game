{"ast":null,"code":"import * as THREE from \"three\";\nimport { add } from \"../utils/three\";\nimport { sound } from \"../utils\";\nimport CrashFile from \"../../assets/audio/crash-01.wav\";\nexport default (function (_ref) {\n  var parent = _ref.parent,\n      world = _ref.world,\n      _ref$dynamic = _ref.dynamic,\n      dynamic = _ref$dynamic === void 0 ? true : _ref$dynamic,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      _ref$z = _ref.z,\n      z = _ref$z === void 0 ? 0 : _ref$z,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 1.1 : _ref$width,\n      _ref$breadth = _ref.breadth,\n      breadth = _ref$breadth === void 0 ? 1.1 : _ref$breadth,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 1.1 : _ref$height,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === void 0 ? 1 : _ref$scale,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 0x00e6ff : _ref$color;\n  var geometry = new THREE.BoxGeometry(width, height, breadth);\n  var material = new THREE.MeshStandardMaterial({\n    color: color\n  });\n  var box = new THREE.Mesh(geometry, material);\n  box.position.x = x;\n  box.position.y = y;\n  box.position.z = z;\n  box.scale.x = scale;\n  box.scale.y = scale;\n  box.scale.z = scale;\n  add(parent, box);\n  var crash = sound(CrashFile, 16 * 40);\n  return {\n    model: box,\n    bodies: [world.add({\n      type: \"box\",\n      size: [width * scale, height * scale, breadth * scale],\n      pos: [x, y, z],\n      rot: [0, 0, 0],\n      move: dynamic,\n      density: 0.1,\n      friction: 0.9,\n      restitution: 0.2,\n      belongsTo: 1,\n      collidesWith: 0xffffffff\n    })],\n    collision: function collision(self, other, contact, entities, _ref2) {\n      var gamepadController = _ref2.gamepadController;\n\n      if (!contact.close) {\n        crash();\n        var camera = entities.camera;\n        if (camera) camera.shake();\n        if (gamepadController) gamepadController.vibrate({\n          duration: 300,\n          strongMagnitude: 0.3\n        });\n      }\n    },\n    removable: function removable(frustum, self) {\n      return !frustum.intersectsObject(self.model);\n    }\n  };\n});","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/components/box.js"],"names":["THREE","add","sound","CrashFile","parent","world","dynamic","x","y","z","width","breadth","height","scale","color","geometry","BoxGeometry","material","MeshStandardMaterial","box","Mesh","position","crash","model","bodies","type","size","pos","rot","move","density","friction","restitution","belongsTo","collidesWith","collision","self","other","contact","entities","gamepadController","close","camera","shake","vibrate","duration","strongMagnitude","removable","frustum","intersectsObject"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { add } from \"../utils/three\";\nimport { sound } from \"../utils\";\nimport CrashFile from \"../../assets/audio/crash-01.wav\";\n\nexport default ({\n\tparent,\n\tworld,\n\tdynamic = true,\n\tx = 0,\n\ty = 0,\n\tz = 0,\n\twidth = 1.1,\n\tbreadth = 1.1,\n\theight = 1.1,\n\tscale = 1,\n\tcolor = 0x00e6ff\n}) => {\n\tconst geometry = new THREE.BoxGeometry(width, height, breadth);\n\tconst material = new THREE.MeshStandardMaterial({ color });\n\tconst box = new THREE.Mesh(geometry, material);\n\n\tbox.position.x = x;\n\tbox.position.y = y;\n\tbox.position.z = z;\n\tbox.scale.x = scale;\n\tbox.scale.y = scale;\n\tbox.scale.z = scale;\n\n\tadd(parent, box);\n\t\n\tconst crash = sound(CrashFile, 16 * 40);\n\n\treturn {\n\t\tmodel: box,\n\t\tbodies: [\n\t\t\tworld.add({\n\t\t\t\ttype: \"box\",\n\t\t\t\tsize: [width * scale, height * scale, breadth * scale],\n\t\t\t\tpos: [x, y, z],\n\t\t\t\trot: [0, 0, 0],\n\t\t\t\tmove: dynamic,\n\t\t\t\tdensity: 0.1,\n\t\t\t\tfriction: 0.9,\n\t\t\t\trestitution: 0.2,\n\t\t\t\tbelongsTo: 1,\n\t\t\t\tcollidesWith: 0xffffffff\n\t\t\t})\n\t\t],\n\t\tcollision: (self, other, contact, entities, { gamepadController }) => {\n\t\t\tif (!contact.close) {\n\t\t\t\tcrash();\n\n\t\t\t\tconst camera = entities.camera;\n\n\t\t\t\tif (camera)\n\t\t\t\t\tcamera.shake();\n\n\t\t\t\tif (gamepadController)\n\t\t\t\t\tgamepadController.vibrate({ duration: 300, strongMagnitude: 0.3 });\n\t\t\t}\n\t\t},\n\t\tremovable: (frustum, self) => !frustum.intersectsObject(self.model)\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}