{"ast":null,"code":"import * as THREE from \"three\";\nimport Pass from \"./pass\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar ShaderPass = function ShaderPass(shader, textureID) {\n  Pass.call(this);\n  this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n  if (shader instanceof THREE.ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      defines: Object.assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n  }\n\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new THREE.Scene();\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n};\n\nShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: ShaderPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      renderer.render(this.scene, this.camera);\n    }\n  }\n});\nexport default ShaderPass;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/graphics/passes/shader-pass.js"],"names":["THREE","Pass","ShaderPass","shader","textureID","call","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","Object","assign","vertexShader","fragmentShader","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAWC,MAAX,EAAmBC,SAAnB,EAA+B;AAEjDH,EAAAA,IAAI,CAACI,IAAL,CAAW,IAAX;AAEA,OAAKD,SAAL,GAAmBA,SAAS,KAAKE,SAAhB,GAA8BF,SAA9B,GAA0C,UAA3D;;AAEA,MAAKD,MAAM,YAAYH,KAAK,CAACO,cAA7B,EAA8C;AAE7C,SAAKC,QAAL,GAAgBL,MAAM,CAACK,QAAvB;AAEA,SAAKC,QAAL,GAAgBN,MAAhB;AAEA,GAND,MAMO,IAAKA,MAAL,EAAc;AAEpB,SAAKK,QAAL,GAAgBR,KAAK,CAACU,aAAN,CAAoBC,KAApB,CAA2BR,MAAM,CAACK,QAAlC,CAAhB;AAEA,SAAKC,QAAL,GAAgB,IAAIT,KAAK,CAACO,cAAV,CAA0B;AAEzCK,MAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAe,EAAf,EAAmBX,MAAM,CAACS,OAA1B,CAFgC;AAGzCJ,MAAAA,QAAQ,EAAE,KAAKA,QAH0B;AAIzCO,MAAAA,YAAY,EAAEZ,MAAM,CAACY,YAJoB;AAKzCC,MAAAA,cAAc,EAAEb,MAAM,CAACa;AALkB,KAA1B,CAAhB;AASA;;AAED,OAAKC,MAAL,GAAc,IAAIjB,KAAK,CAACkB,kBAAV,CAA8B,CAAE,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAE,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAd;AACA,OAAKC,KAAL,GAAa,IAAInB,KAAK,CAACoB,KAAV,EAAb;AAEA,OAAKC,IAAL,GAAY,IAAIrB,KAAK,CAACsB,IAAV,CAAgB,IAAItB,KAAK,CAACuB,mBAAV,CAA+B,CAA/B,EAAkC,CAAlC,CAAhB,EAAuD,IAAvD,CAAZ;AACA,OAAKF,IAAL,CAAUG,aAAV,GAA0B,KAA1B,CA/BiD,CA+BhB;;AACjC,OAAKL,KAAL,CAAWM,GAAX,CAAgB,KAAKJ,IAArB;AAEA,CAlCD;;AAoCAnB,UAAU,CAACwB,SAAX,GAAuBb,MAAM,CAACC,MAAP,CAAeD,MAAM,CAACc,MAAP,CAAe1B,IAAI,CAACyB,SAApB,CAAf,EAAgD;AAEtEE,EAAAA,WAAW,EAAE1B,UAFyD;AAItE2B,EAAAA,MAAM,EAAE,gBAAWC,QAAX,EAAqBC,WAArB,EAAkCC,UAAlC,EAA8CC,SAA9C,EAAyDC,UAAzD,EAAsE;AAE7E,QAAK,KAAK1B,QAAL,CAAe,KAAKJ,SAApB,CAAL,EAAuC;AAEtC,WAAKI,QAAL,CAAe,KAAKJ,SAApB,EAAgC+B,KAAhC,GAAwCH,UAAU,CAACI,OAAnD;AAEA;;AAED,SAAKf,IAAL,CAAUZ,QAAV,GAAqB,KAAKA,QAA1B;;AAEA,QAAK,KAAK4B,cAAV,EAA2B;AAE1BP,MAAAA,QAAQ,CAACQ,eAAT,CAA0B,IAA1B;AACAR,MAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKV,KAAtB,EAA6B,KAAKF,MAAlC;AAEA,KALD,MAKO;AAENa,MAAAA,QAAQ,CAACQ,eAAT,CAA0BP,WAA1B,EAFM,CAGN;;AACA,UAAK,KAAKQ,KAAV,EAAkBT,QAAQ,CAACS,KAAT,CAAgBT,QAAQ,CAACU,cAAzB,EAAyCV,QAAQ,CAACW,cAAlD,EAAkEX,QAAQ,CAACY,gBAA3E;AAClBZ,MAAAA,QAAQ,CAACD,MAAT,CAAiB,KAAKV,KAAtB,EAA6B,KAAKF,MAAlC;AAEA;AAED;AA5BqE,CAAhD,CAAvB;AAgCA,eAAef,UAAf","sourcesContent":["import * as THREE from \"three\";\nimport Pass from \"./pass\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nconst ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof THREE.ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tthis.scene = new THREE.Scene();\n\n\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\n\tthis.quad.frustumCulled = false; // Avoid getting clipped\n\tthis.scene.add( this.quad );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.quad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t}\n\n\t}\n\n} );\n\nexport default ShaderPass;"]},"metadata":{},"sourceType":"module"}