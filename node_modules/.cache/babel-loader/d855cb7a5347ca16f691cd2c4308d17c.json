{"ast":null,"code":"import * as THREE from \"three\";\nimport CopyShader from \"./shaders/copy-shader\";\nimport ShaderPass from \"./passes/shader-pass\";\nimport MaskPass from \"./passes/mask-pass\";\nimport ClearMaskPass from \"./passes/clear-mask-pass\";\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBAFormat,\n      stencilBuffer: false\n    };\n    var size = new THREE.Vector2();\n    renderer.getDrawingBufferSize(size);\n    renderTarget = new THREE.WebGLRenderTarget(size.width, size.height, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.passes = []; // dependencies\n\n  if (CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.CopyShader');\n  }\n\n  if (ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on THREE.ShaderPass');\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n};\n\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    var size = new THREE.Vector2();\n    this.renderer.getDrawingBufferSize(size);\n    pass.setSize(size.width, size.height);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n  render: function render(delta) {\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.context;\n          context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);\n          context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = new THREE.Vector2();\n      this.renderer.getDrawingBufferSize(size);\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(size.width, size.height);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this.renderTarget1.setSize(width, height);\n    this.renderTarget2.setSize(width, height);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(width, height);\n    }\n  }\n});\nexport default EffectComposer;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/graphics/effect-composer.js"],"names":["THREE","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","undefined","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","Vector2","getDrawingBufferSize","WebGLRenderTarget","width","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","passes","console","error","copyPass","Object","assign","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","render","delta","maskActive","i","il","length","enabled","needsSwap","context","stencilFunc","NOTEQUAL","EQUAL","reset","dispose"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport CopyShader from \"./shaders/copy-shader\";\nimport ShaderPass from \"./passes/shader-pass\";\nimport MaskPass from \"./passes/mask-pass\";\nimport ClearMaskPass from \"./passes/clear-mask-pass\";\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nconst EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = new THREE.Vector2();\n\t\trenderer.getDrawingBufferSize(size);\n\t\trenderTarget = new THREE.WebGLRenderTarget( size.width, size.height, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on THREE.CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on THREE.ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\n\t\tvar size = new THREE.Vector2();\n\t\tthis.renderer.getDrawingBufferSize(size);\n\t\tpass.setSize( size.width, size.height );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\trender: function ( delta ) {\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.context;\n\n\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\n\n\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = new THREE.Vector2();\n\t\t\tthis.renderer.getDrawingBufferSize(size);\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( size.width, size.height );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.renderTarget1.setSize( width, height );\n\t\tthis.renderTarget2.setSize( width, height );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( width, height );\n\n\t\t}\n\n\t}\n\n} );\n\nexport default EffectComposer;"]},"metadata":{},"sourceType":"module"}