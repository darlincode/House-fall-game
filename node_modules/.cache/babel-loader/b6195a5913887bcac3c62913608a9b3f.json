{"ast":null,"code":"import { all } from \"../utils\";\n\nvar Physics = function Physics(entities, args) {\n  var world = entities.world;\n  var entitiesWithBodies = all(entities, function (e) {\n    return e.bodies && e.model;\n  });\n  if (world) world.step();\n\n  for (var x = 0; x < entitiesWithBodies.length; x++) {\n    var entity = entitiesWithBodies[x];\n    var model = entity.model;\n    var body = entity.bodies[0];\n    var collision = entity.collision;\n\n    if (!body.sleeping) {\n      model.position.copy(body.getPosition());\n      model.quaternion.copy(body.getQuaternion());\n    }\n\n    if (collision) {\n      for (var y = 0; y < entitiesWithBodies.length; y++) {\n        if (x === y) continue;\n        var otherEntity = entitiesWithBodies[y];\n        var otherBody = otherEntity.bodies[0];\n        var contact = world.getContact(body, otherBody);\n        if (contact) collision(entity, otherEntity, contact, entities, args);\n      }\n    }\n  }\n\n  return entities;\n};\n\nexport default Physics;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/systems/physics.js"],"names":["all","Physics","entities","args","world","entitiesWithBodies","e","bodies","model","step","x","length","entity","body","collision","sleeping","position","copy","getPosition","quaternion","getQuaternion","y","otherEntity","otherBody","contact","getContact"],"mappings":"AAAA,SAASA,GAAT,QAAoB,UAApB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAAWC,IAAX,EAAoB;AAClC,MAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAvB;AACA,MAAMC,kBAAkB,GAAGL,GAAG,CAACE,QAAD,EAAW,UAAAI,CAAC;AAAA,WAAIA,CAAC,CAACC,MAAF,IAAYD,CAAC,CAACE,KAAlB;AAAA,GAAZ,CAA9B;AAEA,MAAIJ,KAAJ,EACCA,KAAK,CAACK,IAAN;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,kBAAkB,CAACM,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AACnD,QAAME,MAAM,GAAGP,kBAAkB,CAACK,CAAD,CAAjC;AACA,QAAMF,KAAK,GAAGI,MAAM,CAACJ,KAArB;AACA,QAAMK,IAAI,GAAGD,MAAM,CAACL,MAAP,CAAc,CAAd,CAAb;AACA,QAAMO,SAAS,GAAGF,MAAM,CAACE,SAAzB;;AAEF,QAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AACjBP,MAAAA,KAAK,CAACQ,QAAN,CAAeC,IAAf,CAAoBJ,IAAI,CAACK,WAAL,EAApB;AACCV,MAAAA,KAAK,CAACW,UAAN,CAAiBF,IAAjB,CAAsBJ,IAAI,CAACO,aAAL,EAAtB;AACD;;AAED,QAAIN,SAAJ,EAAe;AACd,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,kBAAkB,CAACM,MAAvC,EAA+CU,CAAC,EAAhD,EAAoD;AACnD,YAAIX,CAAC,KAAKW,CAAV,EACC;AAED,YAAMC,WAAW,GAAGjB,kBAAkB,CAACgB,CAAD,CAAtC;AACA,YAAME,SAAS,GAAGD,WAAW,CAACf,MAAZ,CAAmB,CAAnB,CAAlB;AACA,YAAMiB,OAAO,GAAGpB,KAAK,CAACqB,UAAN,CAAiBZ,IAAjB,EAAuBU,SAAvB,CAAhB;AAEA,YAAIC,OAAJ,EACCV,SAAS,CAACF,MAAD,EAASU,WAAT,EAAsBE,OAAtB,EAA+BtB,QAA/B,EAAyCC,IAAzC,CAAT;AACD;AACD;AACD;;AAED,SAAOD,QAAP;AACD,CAlCD;;AAoCA,eAAeD,OAAf","sourcesContent":["import { all } from \"../utils\";\n\nconst Physics = (entities, args) => {\n  const world = entities.world;\n  const entitiesWithBodies = all(entities, e => e.bodies && e.model);\n\n  if (world) \n  \tworld.step();\n\n  for (let x = 0; x < entitiesWithBodies.length; x++) {\n  \tconst entity = entitiesWithBodies[x];\n  \tconst model = entity.model;\n  \tconst body = entity.bodies[0];\n  \tconst collision = entity.collision;\n\n\tif (!body.sleeping) {\n  \t\tmodel.position.copy(body.getPosition());\n    \tmodel.quaternion.copy(body.getQuaternion());\n  \t}\n\n  \tif (collision) {\n  \t\tfor (let y = 0; y < entitiesWithBodies.length; y++) {\n  \t\t\tif (x === y) \n  \t\t\t\tcontinue;\n\n  \t\t\tconst otherEntity = entitiesWithBodies[y];\n  \t\t\tconst otherBody = otherEntity.bodies[0];\n  \t\t\tconst contact = world.getContact(body, otherBody);\n\n  \t\t\tif (contact)\n  \t\t\t\tcollision(entity, otherEntity, contact, entities, args);\n  \t\t}\n  \t}\n  }\n\n  return entities;\n};\n\nexport default Physics;\n"]},"metadata":{},"sourceType":"module"}