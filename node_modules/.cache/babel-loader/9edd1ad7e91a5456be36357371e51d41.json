{"ast":null,"code":"import * as THREE from 'three';\n/*\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar DDSLoader = function DDSLoader() {\n  this._parser = DDSLoader.parse;\n};\n\nDDSLoader.prototype = Object.create(THREE.CompressedTextureLoader.prototype);\nDDSLoader.prototype.constructor = DDSLoader;\n\nDDSLoader.parse = function (buffer, loadMipmaps) {\n  var dds = {\n    mipmaps: [],\n    width: 0,\n    height: 0,\n    format: null,\n    mipmapCount: 1\n  }; // Adapted from @toji's DDS utils\n  // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n  // All values and structures referenced from:\n  // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n  var DDS_MAGIC = 0x20534444;\n  var DDSD_MIPMAPCOUNT = 0x20000;\n  var DDSCAPS2_CUBEMAP = 0x200,\n      DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n      DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n      DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n      DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n      DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n      DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\n  var DDPF_FOURCC = 0x4;\n\n  function fourCCToInt32(value) {\n    return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n  }\n\n  function int32ToFourCC(value) {\n    return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n  }\n\n  function loadARGBMip(buffer, dataOffset, width, height) {\n    var dataLength = width * height * 4;\n    var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n    var byteArray = new Uint8Array(dataLength);\n    var dst = 0;\n    var src = 0;\n\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        var b = srcBuffer[src];\n        src++;\n        var g = srcBuffer[src];\n        src++;\n        var r = srcBuffer[src];\n        src++;\n        var a = srcBuffer[src];\n        src++;\n        byteArray[dst] = r;\n        dst++; //r\n\n        byteArray[dst] = g;\n        dst++; //g\n\n        byteArray[dst] = b;\n        dst++; //b\n\n        byteArray[dst] = a;\n        dst++; //a\n      }\n    }\n\n    return byteArray;\n  }\n\n  var FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n  var FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n  var FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n  var FOURCC_ETC1 = fourCCToInt32(\"ETC1\");\n  var headerLengthInt = 31; // The header length in 32 bit ints\n  // Offsets into the header array\n\n  var off_magic = 0;\n  var off_size = 1;\n  var off_flags = 2;\n  var off_height = 3;\n  var off_width = 4;\n  var off_mipmapCount = 7;\n  var off_pfFlags = 20;\n  var off_pfFourCC = 21;\n  var off_RGBBitCount = 22;\n  var off_RBitMask = 23;\n  var off_GBitMask = 24;\n  var off_BBitMask = 25;\n  var off_ABitMask = 26;\n  var off_caps2 = 28; // Parse header\n\n  var header = new Int32Array(buffer, 0, headerLengthInt);\n\n  if (header[off_magic] !== DDS_MAGIC) {\n    console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n    return dds;\n  }\n\n  if (!header[off_pfFlags] & DDPF_FOURCC) {\n    console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n    return dds;\n  }\n\n  var blockBytes;\n  var fourCC = header[off_pfFourCC];\n  var isRGBAUncompressed = false;\n\n  switch (fourCC) {\n    case FOURCC_DXT1:\n      blockBytes = 8;\n      dds.format = THREE.RGB_S3TC_DXT1_Format;\n      break;\n\n    case FOURCC_DXT3:\n      blockBytes = 16;\n      dds.format = THREE.RGBA_S3TC_DXT3_Format;\n      break;\n\n    case FOURCC_DXT5:\n      blockBytes = 16;\n      dds.format = THREE.RGBA_S3TC_DXT5_Format;\n      break;\n\n    case FOURCC_ETC1:\n      blockBytes = 8;\n      dds.format = THREE.RGB_ETC1_Format;\n      break;\n\n    default:\n      if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n        isRGBAUncompressed = true;\n        blockBytes = 64;\n        dds.format = THREE.RGBAFormat;\n      } else {\n        console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n        return dds;\n      }\n\n  }\n\n  dds.mipmapCount = 1;\n\n  if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n    dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n  }\n\n  var caps2 = header[off_caps2];\n  dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n  if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n    console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n    return dds;\n  }\n\n  dds.width = header[off_width];\n  dds.height = header[off_height];\n  var dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n  var faces = dds.isCubemap ? 6 : 1;\n\n  for (var face = 0; face < faces; face++) {\n    var width = dds.width;\n    var height = dds.height;\n    var byteArray = null;\n    var dataLength = null;\n\n    for (var i = 0; i < dds.mipmapCount; i++) {\n      if (isRGBAUncompressed) {\n        byteArray = loadARGBMip(buffer, dataOffset, width, height);\n        dataLength = byteArray.length;\n      } else {\n        dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n        byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n      }\n\n      var mipmap = {\n        \"data\": byteArray,\n        \"width\": width,\n        \"height\": height\n      };\n      dds.mipmaps.push(mipmap);\n      dataOffset += dataLength;\n      width = Math.max(width >> 1, 1);\n      height = Math.max(height >> 1, 1);\n    }\n  }\n\n  return dds;\n};\n\nexport default DDSLoader;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/utils/three/dds-loader.js"],"names":["THREE","DDSLoader","_parser","parse","prototype","Object","create","CompressedTextureLoader","constructor","buffer","loadMipmaps","dds","mipmaps","width","height","format","mipmapCount","DDS_MAGIC","DDSD_MIPMAPCOUNT","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDPF_FOURCC","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","loadARGBMip","dataOffset","dataLength","srcBuffer","Uint8Array","byteArray","dst","src","y","x","b","g","r","a","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_RGBBitCount","off_RBitMask","off_GBitMask","off_BBitMask","off_ABitMask","off_caps2","header","Int32Array","console","error","blockBytes","fourCC","isRGBAUncompressed","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGBAFormat","Math","max","caps2","isCubemap","faces","face","i","length","mipmap","push"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\n/*\n * @author mrdoob / http://mrdoob.com/\n */\n\nconst DDSLoader = function () {\n\n\tthis._parser = DDSLoader.parse;\n\n};\n\nDDSLoader.prototype = Object.create( THREE.CompressedTextureLoader.prototype );\nDDSLoader.prototype.constructor = DDSLoader;\n\nDDSLoader.parse = function ( buffer, loadMipmaps ) {\n\n\tvar dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\n\n\t// Adapted from @toji's DDS utils\n\t// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n\n\t// All values and structures referenced from:\n\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n\tvar DDS_MAGIC = 0x20534444;\n\n\tvar DDSD_MIPMAPCOUNT = 0x20000;\n\n\tvar DDSCAPS2_CUBEMAP = 0x200,\n\t\tDDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n\t\tDDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n\t\tDDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n\t\tDDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n\t\tDDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n\t\tDDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\n\n\tvar DDPF_FOURCC = 0x4;\n\n\tfunction fourCCToInt32( value ) {\n\n\t\treturn value.charCodeAt( 0 ) +\n\t\t\t( value.charCodeAt( 1 ) << 8 ) +\n\t\t\t( value.charCodeAt( 2 ) << 16 ) +\n\t\t\t( value.charCodeAt( 3 ) << 24 );\n\n\t}\n\n\tfunction int32ToFourCC( value ) {\n\n\t\treturn String.fromCharCode(\n\t\t\tvalue & 0xff,\n\t\t\t( value >> 8 ) & 0xff,\n\t\t\t( value >> 16 ) & 0xff,\n\t\t\t( value >> 24 ) & 0xff\n\t\t);\n\n\t}\n\n\tfunction loadARGBMip( buffer, dataOffset, width, height ) {\n\n\t\tvar dataLength = width * height * 4;\n\t\tvar srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );\n\t\tvar byteArray = new Uint8Array( dataLength );\n\t\tvar dst = 0;\n\t\tvar src = 0;\n\t\tfor ( var y = 0; y < height; y ++ ) {\n\n\t\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\t\tvar b = srcBuffer[ src ]; src ++;\n\t\t\t\tvar g = srcBuffer[ src ]; src ++;\n\t\t\t\tvar r = srcBuffer[ src ]; src ++;\n\t\t\t\tvar a = srcBuffer[ src ]; src ++;\n\t\t\t\tbyteArray[ dst ] = r; dst ++;\t//r\n\t\t\t\tbyteArray[ dst ] = g; dst ++;\t//g\n\t\t\t\tbyteArray[ dst ] = b; dst ++;\t//b\n\t\t\t\tbyteArray[ dst ] = a; dst ++;\t//a\n\n\t\t\t}\n\n\t\t}\n\t\treturn byteArray;\n\n\t}\n\n\tvar FOURCC_DXT1 = fourCCToInt32( \"DXT1\" );\n\tvar FOURCC_DXT3 = fourCCToInt32( \"DXT3\" );\n\tvar FOURCC_DXT5 = fourCCToInt32( \"DXT5\" );\n\tvar FOURCC_ETC1 = fourCCToInt32( \"ETC1\" );\n\n\tvar headerLengthInt = 31; // The header length in 32 bit ints\n\n\t// Offsets into the header array\n\n\tvar off_magic = 0;\n\n\tvar off_size = 1;\n\tvar off_flags = 2;\n\tvar off_height = 3;\n\tvar off_width = 4;\n\n\tvar off_mipmapCount = 7;\n\n\tvar off_pfFlags = 20;\n\tvar off_pfFourCC = 21;\n\tvar off_RGBBitCount = 22;\n\tvar off_RBitMask = 23;\n\tvar off_GBitMask = 24;\n\tvar off_BBitMask = 25;\n\tvar off_ABitMask = 26;\n\n\tvar off_caps2 = 28;\n\n\t// Parse header\n\n\tvar header = new Int32Array( buffer, 0, headerLengthInt );\n\n\tif ( header[ off_magic ] !== DDS_MAGIC ) {\n\n\t\tconsole.error( 'THREE.DDSLoader.parse: Invalid magic number in DDS header.' );\n\t\treturn dds;\n\n\t}\n\n\tif ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\n\n\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.' );\n\t\treturn dds;\n\n\t}\n\n\tvar blockBytes;\n\n\tvar fourCC = header[ off_pfFourCC ];\n\n\tvar isRGBAUncompressed = false;\n\n\tswitch ( fourCC ) {\n\n\t\tcase FOURCC_DXT1:\n\n\t\t\tblockBytes = 8;\n\t\t\tdds.format = THREE.RGB_S3TC_DXT1_Format;\n\t\t\tbreak;\n\n\t\tcase FOURCC_DXT3:\n\n\t\t\tblockBytes = 16;\n\t\t\tdds.format = THREE.RGBA_S3TC_DXT3_Format;\n\t\t\tbreak;\n\n\t\tcase FOURCC_DXT5:\n\n\t\t\tblockBytes = 16;\n\t\t\tdds.format = THREE.RGBA_S3TC_DXT5_Format;\n\t\t\tbreak;\n\n\t\tcase FOURCC_ETC1:\n\n\t\t\tblockBytes = 8;\n\t\t\tdds.format = THREE.RGB_ETC1_Format;\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tif ( header[ off_RGBBitCount ] === 32\n\t\t\t\t&& header[ off_RBitMask ] & 0xff0000\n\t\t\t\t&& header[ off_GBitMask ] & 0xff00\n\t\t\t\t&& header[ off_BBitMask ] & 0xff\n\t\t\t\t&& header[ off_ABitMask ] & 0xff000000 ) {\n\n\t\t\t\tisRGBAUncompressed = true;\n\t\t\t\tblockBytes = 64;\n\t\t\t\tdds.format = THREE.RGBAFormat;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC( fourCC ) );\n\t\t\t\treturn dds;\n\n\t\t\t}\n\n\t}\n\n\tdds.mipmapCount = 1;\n\n\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\n\n\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\n\n\t}\n\n\tvar caps2 = header[ off_caps2 ];\n\tdds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\tif ( dds.isCubemap && (\n\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEX ) ||\n\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX ) ||\n\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEY ) ||\n\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY ) ||\n\t\t! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ ) ||\n\t\t! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ )\n\t) ) {\n\n\t\tconsole.error( 'THREE.DDSLoader.parse: Incomplete cubemap faces' );\n\t\treturn dds;\n\n\t}\n\n\tdds.width = header[ off_width ];\n\tdds.height = header[ off_height ];\n\n\tvar dataOffset = header[ off_size ] + 4;\n\n\t// Extract mipmaps buffers\n\n\tvar faces = dds.isCubemap ? 6 : 1;\n\n\tfor ( var face = 0; face < faces; face ++ ) {\n\n\t\tvar width = dds.width;\n\t\tvar height = dds.height;\n\t\tvar byteArray = null;\n\t\tvar dataLength = null;\n\n\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\n\n\t\t\tif ( isRGBAUncompressed ) {\n\n\t\t\t\tbyteArray = loadARGBMip( buffer, dataOffset, width, height );\n\t\t\t\tdataLength = byteArray.length;\n\n\t\t\t} else {\n\n\t\t\t\tdataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\n\t\t\t\tbyteArray = new Uint8Array( buffer, dataOffset, dataLength );\n\n\t\t\t}\n\n\t\t\tvar mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\n\t\t\tdds.mipmaps.push( mipmap );\n\n\t\t\tdataOffset += dataLength;\n\n\t\t\twidth = Math.max( width >> 1, 1 );\n\t\t\theight = Math.max( height >> 1, 1 );\n\n\t\t}\n\n\t}\n\n\treturn dds;\n\n};\n\nexport default DDSLoader;"]},"metadata":{},"sourceType":"module"}