{"ast":null,"code":"var readButton = function readButton(input, buttons, name) {\n  return input.find(function (x) {\n    return x.name === name && buttons.indexOf(x.payload.button) !== -1;\n  });\n};\n\nvar createButtonReader = function createButtonReader(buttons) {\n  var down = false;\n  return function (input) {\n    if (readButton(input, buttons, \"onMouseDown\")) down = true;\n    if (readButton(input, buttons, \"onMouseUp\")) down = false;\n    return down;\n  };\n};\n\nvar createPositionReader = function createPositionReader() {\n  var position = {\n    x: 0,\n    y: 0\n  };\n  return function (input) {\n    var move = input.find(function (x) {\n      return x.name === \"onMouseMove\";\n    });\n\n    if (move) {\n      position = {\n        x: move.payload.pageX,\n        y: move.payload.pageY\n      };\n    }\n\n    return position;\n  };\n};\n\nvar createWheelReader = function createWheelReader() {\n  var value = 0;\n  return function (input) {\n    var wheel = input.find(function (x) {\n      return x.name === \"onWheel\";\n    });\n\n    if (wheel) {\n      if (wheel.payload.deltaY < 0) value--;else value++;\n    }\n\n    return value;\n  };\n};\n\nvar left = createButtonReader([0]);\nvar middle = createButtonReader([1]);\nvar right = createButtonReader([2]);\nvar position = createPositionReader();\nvar wheel = createWheelReader();\nvar previous = {};\n\nvar MouseController = function MouseController() {\n  var Wrapped = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {\n    return x;\n  };\n  return function (entities, args) {\n    if (!args.mouseController) {\n      var input = args.input;\n      var current = {\n        left: left(input),\n        middle: middle(input),\n        right: right(input),\n        position: position(input),\n        wheel: wheel(input)\n      };\n      args.mouseController = Object.assign({}, current, {\n        previous: previous\n      });\n      previous = current;\n    }\n\n    return Wrapped(entities, args);\n  };\n};\n\nexport default MouseController;","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/systems/mouse-controller.js"],"names":["readButton","input","buttons","name","find","x","indexOf","payload","button","createButtonReader","down","createPositionReader","position","y","move","pageX","pageY","createWheelReader","value","wheel","deltaY","left","middle","right","previous","MouseController","Wrapped","entities","args","mouseController","current","Object","assign"],"mappings":"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","sourcesContent":["const readButton = (input, buttons, name) => input.find(x => x.name === name && buttons.indexOf(x.payload.button) !== -1);\n\nconst createButtonReader = buttons => {\n  let down = false;\n\n  return input => {\n    if (readButton(input, buttons, \"onMouseDown\"))\n      down = true;\n    \n    if (readButton(input, buttons, \"onMouseUp\"))\n      down = false;\n\n    return down;\n  }\n};\n\nconst createPositionReader = () => {\n  let position = { x: 0, y: 0 };\n\n  return input => {\n    const move = input.find(x => x.name === \"onMouseMove\");\n\n    if (move) {\n      position = {\n        x: move.payload.pageX,\n        y: move.payload.pageY\n      }\n    }\n\n    return position;\n  }\n}\n\nconst createWheelReader = () => {\n  let value = 0;\n\n  return input => {\n    const wheel = input.find(x => x.name === \"onWheel\");\n\n    if (wheel) {\n      if (wheel.payload.deltaY < 0)\n        value--;\n      else \n        value++;\n    }\n\n    return value;\n  }\n}\n\nconst left = createButtonReader([0]);\nconst middle = createButtonReader([1]);\nconst right = createButtonReader([2]);\nconst position = createPositionReader();\nconst wheel = createWheelReader();\n\nlet previous = { };\n\nconst MouseController = (Wrapped = x => x) => (entities, args) => {\n\n  if (!args.mouseController) {\n      const input = args.input;\n\n      const current = {\n        left: left(input),\n        middle: middle(input),\n        right: right(input),\n        position: position(input),\n        wheel: wheel(input)\n      };\n\n      args.mouseController = Object.assign({}, current, { previous });\n\n      previous = current;\n  }\n\n  return Wrapped(entities, args);\n};\n\nexport default MouseController;"]},"metadata":{},"sourceType":"module"}