{"ast":null,"code":"import * as THREE from \"three\";\nexport default (function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$pixelSize = _ref.pixelSize,\n      pixelSize = _ref$pixelSize === void 0 ? 5 : _ref$pixelSize,\n      _ref$borderSize = _ref.borderSize,\n      borderSize = _ref$borderSize === void 0 ? 1 : _ref$borderSize,\n      _ref$lightenFactor = _ref.lightenFactor,\n      lightenFactor = _ref$lightenFactor === void 0 ? 1.8 : _ref$lightenFactor,\n      _ref$softenFactor = _ref.softenFactor,\n      softenFactor = _ref$softenFactor === void 0 ? 0.75 : _ref$softenFactor,\n      _ref$darkenFactor = _ref.darkenFactor,\n      darkenFactor = _ref$darkenFactor === void 0 ? 0.5 : _ref$darkenFactor,\n      _ref$resolution = _ref.resolution,\n      resolution = _ref$resolution === void 0 ? new THREE.Vector2(window.innerWidth, window.innerHeight) : _ref$resolution;\n\n  var pixelShader = {\n    uniforms: {\n      tDiffuse: {\n        value: null\n      },\n      pixelSize: {\n        value: pixelSize\n      },\n      borderFraction: {\n        value: borderSize / pixelSize\n      },\n      lightenFactor: {\n        value: lightenFactor\n      },\n      softenFactor: {\n        value: softenFactor\n      },\n      darkenFactor: {\n        value: darkenFactor\n      },\n      resolution: {\n        value: resolution\n      }\n    },\n    vertexShader: \"\\n\\t\\t\\tvarying highp vec2 vUv;\\n\\n\\t\\t\\tvoid main() {\\n\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\t\\t\\t}\",\n    fragmentShader: \"\\n\\t\\t\\tuniform sampler2D tDiffuse;\\n\\t\\t\\tuniform float pixelSize;\\n\\t\\t\\tuniform float borderFraction;\\n\\t\\t\\tuniform float lightenFactor;\\n\\t\\t\\tuniform float softenFactor;\\n\\t\\t\\tuniform float darkenFactor;\\n\\t\\t\\tuniform vec2 resolution;\\n\\n\\t\\t\\tvarying highp vec2 vUv;\\n\\n\\t\\t\\tvoid main(){\\n\\t\\t\\t\\tvec2 dxy = pixelSize / resolution;\\n\\t\\t\\t\\tvec2 pixel = vUv / dxy;\\n\\t\\t\\t\\tvec2 fraction = fract(pixel);\\n\\t\\t\\t\\tvec2 coord = dxy * floor(pixel);\\n\\t\\t\\t\\tvec3 color = texture2D(tDiffuse, coord).xyz;\\n\\n\\t\\t\\t\\tif (fraction.y > (1.0 - borderFraction))\\n\\t\\t\\t\\t\\tcolor = color * lightenFactor;\\n\\n\\t\\t\\t\\tif (fraction.x < borderFraction)\\n\\t\\t\\t\\t\\tcolor = color * softenFactor;\\n\\n\\t\\t\\t\\tif (fraction.y < borderFraction)\\n\\t\\t\\t\\t\\tcolor = color * darkenFactor;\\n\\n\\t\\t\\t\\tgl_FragColor = vec4(color, 1);\\n\\t\\t\\t}\"\n  };\n  return pixelShader;\n});","map":{"version":3,"sources":["/home/darlington-chuks/Documents/game-engine/src/game/graphics/shaders/pixel-shader.js"],"names":["THREE","pixelSize","borderSize","lightenFactor","softenFactor","darkenFactor","resolution","Vector2","window","innerWidth","innerHeight","pixelShader","uniforms","tDiffuse","value","borderFraction","vertexShader","fragmentShader"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,gBAAe,YAOJ;AAAA,iFAAP,EAAO;AAAA,4BANVC,SAMU;AAAA,MANVA,SAMU,+BANE,CAMF;AAAA,6BALVC,UAKU;AAAA,MALVA,UAKU,gCALG,CAKH;AAAA,gCAJVC,aAIU;AAAA,MAJVA,aAIU,mCAJM,GAIN;AAAA,+BAHVC,YAGU;AAAA,MAHVA,YAGU,kCAHK,IAGL;AAAA,+BAFVC,YAEU;AAAA,MAFVA,YAEU,kCAFK,GAEL;AAAA,6BADVC,UACU;AAAA,MADVA,UACU,gCADG,IAAIN,KAAK,CAACO,OAAV,CAAkBC,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C,CACH;;AACV,MAAMC,WAAW,GAAG;AACnBC,IAAAA,QAAQ,EAAE;AACTC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OADD;AAETb,MAAAA,SAAS,EAAE;AAAEa,QAAAA,KAAK,EAAEb;AAAT,OAFF;AAGTc,MAAAA,cAAc,EAAE;AAAED,QAAAA,KAAK,EAAEZ,UAAU,GAAGD;AAAtB,OAHP;AAITE,MAAAA,aAAa,EAAE;AAAEW,QAAAA,KAAK,EAAEX;AAAT,OAJN;AAKTC,MAAAA,YAAY,EAAE;AAAEU,QAAAA,KAAK,EAAEV;AAAT,OALL;AAMTC,MAAAA,YAAY,EAAE;AAAES,QAAAA,KAAK,EAAET;AAAT,OANL;AAOTC,MAAAA,UAAU,EAAE;AAAEQ,QAAAA,KAAK,EAAER;AAAT;AAPH,KADS;AAWnBU,IAAAA,YAAY,uKAXO;AAmBnBC,IAAAA,cAAc;AAnBK,GAApB;AAkDA,SAAON,WAAP;AACA,CA3DD","sourcesContent":["import * as THREE from \"three\";\n\nexport default ({\n\tpixelSize = 5,\n\tborderSize = 1,\n\tlightenFactor = 1.8,\n\tsoftenFactor = 0.75,\n\tdarkenFactor = 0.5,\n\tresolution = new THREE.Vector2(window.innerWidth, window.innerHeight)\n} = {}) => {\n\tconst pixelShader = {\n\t\tuniforms: {\n\t\t\ttDiffuse: { value: null },\n\t\t\tpixelSize: { value: pixelSize },\n\t\t\tborderFraction: { value: borderSize / pixelSize },\n\t\t\tlightenFactor: { value: lightenFactor },\n\t\t\tsoftenFactor: { value: softenFactor },\n\t\t\tdarkenFactor: { value: darkenFactor },\n\t\t\tresolution: { value: resolution }\n\t\t},\n\n\t\tvertexShader: `\n\t\t\tvarying highp vec2 vUv;\n\n\t\t\tvoid main() {\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t}`,\n\n\t\tfragmentShader: `\n\t\t\tuniform sampler2D tDiffuse;\n\t\t\tuniform float pixelSize;\n\t\t\tuniform float borderFraction;\n\t\t\tuniform float lightenFactor;\n\t\t\tuniform float softenFactor;\n\t\t\tuniform float darkenFactor;\n\t\t\tuniform vec2 resolution;\n\n\t\t\tvarying highp vec2 vUv;\n\n\t\t\tvoid main(){\n\t\t\t\tvec2 dxy = pixelSize / resolution;\n\t\t\t\tvec2 pixel = vUv / dxy;\n\t\t\t\tvec2 fraction = fract(pixel);\n\t\t\t\tvec2 coord = dxy * floor(pixel);\n\t\t\t\tvec3 color = texture2D(tDiffuse, coord).xyz;\n\n\t\t\t\tif (fraction.y > (1.0 - borderFraction))\n\t\t\t\t\tcolor = color * lightenFactor;\n\n\t\t\t\tif (fraction.x < borderFraction)\n\t\t\t\t\tcolor = color * softenFactor;\n\n\t\t\t\tif (fraction.y < borderFraction)\n\t\t\t\t\tcolor = color * darkenFactor;\n\n\t\t\t\tgl_FragColor = vec4(color, 1);\n\t\t\t}`\n\t};\n\n\treturn pixelShader;\n};\n"]},"metadata":{},"sourceType":"module"}